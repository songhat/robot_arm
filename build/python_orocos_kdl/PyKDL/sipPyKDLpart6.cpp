/*
 * Module code.
 *
 * Generated by SIP 4.19.21
 */

#include "sipAPIPyKDL.h"

#line 352 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 15 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

#line 26 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 22 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 21 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 25 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Wrench_Zero, "Zero() -> Wrench");

extern "C" {static PyObject *meth_Wrench_Zero(PyObject *, PyObject *);}
static PyObject *meth_Wrench_Zero(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench( ::Wrench::Zero());

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName_Zero, doc_Wrench_Zero);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Wrench_ReverseSign, "ReverseSign(self)");

extern "C" {static PyObject *meth_Wrench_ReverseSign(PyObject *, PyObject *);}
static PyObject *meth_Wrench_ReverseSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Wrench *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Wrench, &sipCpp))
        {
            sipCpp->ReverseSign();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName_ReverseSign, doc_Wrench_ReverseSign);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Wrench_RefPoint, "RefPoint(self, v_base_AB: Vector) -> Wrench");

extern "C" {static PyObject *meth_Wrench_RefPoint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Wrench_RefPoint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;
        const  ::Wrench *sipCpp;

        static const char *sipKwdList[] = {
            sipName_v_base_AB,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Wrench, &sipCpp, sipType_Vector, &a0))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench(sipCpp->RefPoint(*a0));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName_RefPoint, doc_Wrench_RefPoint);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_Wrench___neg__(PyObject *);}
static PyObject *slot_Wrench___neg__(PyObject *sipSelf)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Wrench___mul__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Wrench* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Wrench, &a0, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    {
        double a0;
        const  ::Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_Wrench, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Wrench___div__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Wrench* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Wrench, &a0, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Wrench___add__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Wrench* a0;
        const  ::Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Wrench, &a0, sipType_Wrench, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Wrench___sub__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Wrench* a0;
        const  ::Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Wrench, &a0, sipType_Wrench, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Wrench___eq__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, eq_slot, sipType_Wrench, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Wrench___ne__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, ne_slot, sipType_Wrench, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Wrench___repr__(PyObject *);}
static PyObject *slot_Wrench___repr__(PyObject *sipSelf)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            const  ::std::string*sipRes = 0;

#line 389 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=&s;
#line 345 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return sipConvertFromType(const_cast< ::std::string *>(sipRes),sipType_std_string,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static int slot_Wrench___setitem__(PyObject *,PyObject *);}
static int slot_Wrench___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "id", &a0, &a1))
        {
#line 380 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Wrench index out of range");
        return 0;
    }
    (*sipCpp)(a0)=a1;
#line 377 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_Wrench___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            double sipRes = 0;

#line 371 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Wrench index out of range");
        return 0;
    }
    sipRes=(*sipCpp)(a0);
#line 413 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Wrench, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_Wrench___iadd__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Wrench)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            sipCpp-> ::Wrench::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Wrench___isub__(PyObject *,PyObject *);}
static PyObject *slot_Wrench___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Wrench)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Wrench));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Wrench* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Wrench, &a0))
        {
            sipCpp-> ::Wrench::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Call the instance's destructor. */
extern "C" {static void release_Wrench(void *, int);}
static void release_Wrench(void *sipCppV, int)
{
    delete reinterpret_cast< ::Wrench *>(sipCppV);
}


extern "C" {static PyObject *pickle_Wrench(void *);}
static PyObject *pickle_Wrench(void *sipCppV)
{
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipCppV);
    PyObject *sipRes;

#line 400 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->force), vector_type, Py_None),
                                 sipConvertFromType(&(sipCpp->torque), vector_type, Py_None));
#line 524 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Wrench(void *, SIP_SSIZE_T, void *);}
static void assign_Wrench(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Wrench *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Wrench *>(sipSrc);
}


extern "C" {static void *array_Wrench(SIP_SSIZE_T);}
static void *array_Wrench(SIP_SSIZE_T sipNrElem)
{
    return new  ::Wrench[sipNrElem];
}


extern "C" {static void *copy_Wrench(const void *, SIP_SSIZE_T);}
static void *copy_Wrench(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Wrench(reinterpret_cast<const  ::Wrench *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Wrench(sipSimpleWrapper *);}
static void dealloc_Wrench(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Wrench(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Wrench(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Wrench(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Wrench *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Wrench();

            return sipCpp;
        }
    }

    {
        const  ::Vector* a0;
        const  ::Vector* a1;

        static const char *sipKwdList[] = {
            sipName_force,
            sipName_torque,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9", sipType_Vector, &a0, sipType_Vector, &a1))
        {
            sipCpp = new  ::Wrench(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::Wrench* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_Wrench, &a0))
        {
            sipCpp = new  ::Wrench(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Wrench[] = {
    {(void *)slot_Wrench___neg__, neg_slot},
    {(void *)slot_Wrench___mul__, mul_slot},
    {(void *)slot_Wrench___div__, div_slot},
    {(void *)slot_Wrench___add__, add_slot},
    {(void *)slot_Wrench___sub__, sub_slot},
    {(void *)slot_Wrench___eq__, eq_slot},
    {(void *)slot_Wrench___ne__, ne_slot},
    {(void *)slot_Wrench___repr__, repr_slot},
    {(void *)slot_Wrench___setitem__, setitem_slot},
    {(void *)slot_Wrench___getitem__, getitem_slot},
    {(void *)slot_Wrench___iadd__, iadd_slot},
    {(void *)slot_Wrench___isub__, isub_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Wrench[] = {
    {SIP_MLNAME_CAST(sipName_RefPoint), SIP_MLMETH_CAST(meth_Wrench_RefPoint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Wrench_RefPoint)},
    {SIP_MLNAME_CAST(sipName_ReverseSign), meth_Wrench_ReverseSign, METH_VARARGS, SIP_MLDOC_CAST(doc_Wrench_ReverseSign)},
    {SIP_MLNAME_CAST(sipName_Zero), meth_Wrench_Zero, METH_VARARGS, SIP_MLDOC_CAST(doc_Wrench_Zero)}
};


extern "C" {static PyObject *varget_Wrench_force(void *, PyObject *, PyObject *);}
static PyObject *varget_Wrench_force(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Vector*sipVal;
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -22);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->force;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -21, sipPySelf);
        sipKeepReference(sipPySelf, -22, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Wrench_force(void *, PyObject *, PyObject *);}
static int varset_Wrench_force(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Vector*sipVal;
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Vector *>(sipForceConvertToType(sipPy, sipType_Vector, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->force = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Wrench_torque(void *, PyObject *, PyObject *);}
static PyObject *varget_Wrench_torque(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Vector*sipVal;
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -24);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->torque;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -23, sipPySelf);
        sipKeepReference(sipPySelf, -24, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Wrench_torque(void *, PyObject *, PyObject *);}
static int varset_Wrench_torque(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Vector*sipVal;
     ::Wrench *sipCpp = reinterpret_cast< ::Wrench *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Vector *>(sipForceConvertToType(sipPy, sipType_Vector, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->torque = *sipVal;

    return 0;
}

sipVariableDef variables_Wrench[] = {
    {InstanceVariable, sipName_force, (PyMethodDef *)varget_Wrench_force, (PyMethodDef *)varset_Wrench_force, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_torque, (PyMethodDef *)varget_Wrench_torque, (PyMethodDef *)varset_Wrench_torque, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_Wrench, "\1Wrench()\n"
"Wrench(force: Vector, torque: Vector)\n"
"Wrench(Wrench)");


sipClassTypeDef sipTypeDef_PyKDL_Wrench = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_Wrench,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_Wrench,
        {0, 0, 1},
        3, methods_Wrench,
        0, SIP_NULLPTR,
        2, variables_Wrench,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Wrench,
    -1,
    -1,
    SIP_NULLPTR,
    slots_Wrench,
    init_type_Wrench,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Wrench,
    assign_Wrench,
    array_Wrench,
    copy_Wrench,
    release_Wrench,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_Wrench,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 281 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 788 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

#line 26 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 795 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 21 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 798 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Twist_Zero, "Zero() -> Twist");

extern "C" {static PyObject *meth_Twist_Zero(PyObject *, PyObject *);}
static PyObject *meth_Twist_Zero(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist( ::Twist::Zero());

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName_Zero, doc_Twist_Zero);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Twist_ReverseSign, "ReverseSign(self)");

extern "C" {static PyObject *meth_Twist_ReverseSign(PyObject *, PyObject *);}
static PyObject *meth_Twist_ReverseSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Twist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Twist, &sipCpp))
        {
            sipCpp->ReverseSign();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName_ReverseSign, doc_Twist_ReverseSign);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Twist_RefPoint, "RefPoint(self, v_base_AB: Vector) -> Twist");

extern "C" {static PyObject *meth_Twist_RefPoint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Twist_RefPoint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;
        const  ::Twist *sipCpp;

        static const char *sipKwdList[] = {
            sipName_v_base_AB,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Twist, &sipCpp, sipType_Vector, &a0))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist(sipCpp->RefPoint(*a0));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName_RefPoint, doc_Twist_RefPoint);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_Twist___neg__(PyObject *);}
static PyObject *slot_Twist___neg__(PyObject *sipSelf)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Twist___mul__(PyObject *,PyObject *);}
static PyObject *slot_Twist___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Twist* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Twist, &a0, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    {
        double a0;
        const  ::Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_Twist, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Twist___div__(PyObject *,PyObject *);}
static PyObject *slot_Twist___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Twist* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Twist, &a0, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Twist___add__(PyObject *,PyObject *);}
static PyObject *slot_Twist___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Twist* a0;
        const  ::Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Twist, &a0, sipType_Twist, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Twist___sub__(PyObject *,PyObject *);}
static PyObject *slot_Twist___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Twist* a0;
        const  ::Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Twist, &a0, sipType_Twist, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Twist___eq__(PyObject *,PyObject *);}
static PyObject *slot_Twist___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, eq_slot, sipType_Twist, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Twist___ne__(PyObject *,PyObject *);}
static PyObject *slot_Twist___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, ne_slot, sipType_Twist, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Twist___repr__(PyObject *);}
static PyObject *slot_Twist___repr__(PyObject *sipSelf)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            const  ::std::string*sipRes = 0;

#line 316 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=&s;
#line 1118 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return sipConvertFromType(const_cast< ::std::string *>(sipRes),sipType_std_string,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static int slot_Twist___setitem__(PyObject *,PyObject *);}
static int slot_Twist___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "id", &a0, &a1))
        {
#line 307 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Twist index out of range");
        return 0;
    }
    (*sipCpp)(a0)=a1;
#line 1150 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_Twist___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Twist___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            double sipRes = 0;

#line 298 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 5) {
        PyErr_SetString(PyExc_IndexError, "Twist index out of range");
        return 0;
    }
    sipRes=(*sipCpp)(a0);
#line 1186 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Twist, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_Twist___iadd__(PyObject *,PyObject *);}
static PyObject *slot_Twist___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Twist)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            sipCpp-> ::Twist::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Twist___isub__(PyObject *,PyObject *);}
static PyObject *slot_Twist___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Twist)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Twist));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Twist* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Twist, &a0))
        {
            sipCpp-> ::Twist::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Call the instance's destructor. */
extern "C" {static void release_Twist(void *, int);}
static void release_Twist(void *sipCppV, int)
{
    delete reinterpret_cast< ::Twist *>(sipCppV);
}


extern "C" {static PyObject *pickle_Twist(void *);}
static PyObject *pickle_Twist(void *sipCppV)
{
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipCppV);
    PyObject *sipRes;

#line 328 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->vel), vector_type, Py_None),
                                 sipConvertFromType(&(sipCpp->rot), vector_type, Py_None));
#line 1297 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Twist(void *, SIP_SSIZE_T, void *);}
static void assign_Twist(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Twist *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Twist *>(sipSrc);
}


extern "C" {static void *array_Twist(SIP_SSIZE_T);}
static void *array_Twist(SIP_SSIZE_T sipNrElem)
{
    return new  ::Twist[sipNrElem];
}


extern "C" {static void *copy_Twist(const void *, SIP_SSIZE_T);}
static void *copy_Twist(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Twist(reinterpret_cast<const  ::Twist *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Twist(sipSimpleWrapper *);}
static void dealloc_Twist(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Twist(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Twist(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Twist(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Twist *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Twist();

            return sipCpp;
        }
    }

    {
        const  ::Vector* a0;
        const  ::Vector* a1;

        static const char *sipKwdList[] = {
            sipName__vel,
            sipName__rot,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9", sipType_Vector, &a0, sipType_Vector, &a1))
        {
            sipCpp = new  ::Twist(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::Twist* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_Twist, &a0))
        {
            sipCpp = new  ::Twist(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Twist[] = {
    {(void *)slot_Twist___neg__, neg_slot},
    {(void *)slot_Twist___mul__, mul_slot},
    {(void *)slot_Twist___div__, div_slot},
    {(void *)slot_Twist___add__, add_slot},
    {(void *)slot_Twist___sub__, sub_slot},
    {(void *)slot_Twist___eq__, eq_slot},
    {(void *)slot_Twist___ne__, ne_slot},
    {(void *)slot_Twist___repr__, repr_slot},
    {(void *)slot_Twist___setitem__, setitem_slot},
    {(void *)slot_Twist___getitem__, getitem_slot},
    {(void *)slot_Twist___iadd__, iadd_slot},
    {(void *)slot_Twist___isub__, isub_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Twist[] = {
    {SIP_MLNAME_CAST(sipName_RefPoint), SIP_MLMETH_CAST(meth_Twist_RefPoint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Twist_RefPoint)},
    {SIP_MLNAME_CAST(sipName_ReverseSign), meth_Twist_ReverseSign, METH_VARARGS, SIP_MLDOC_CAST(doc_Twist_ReverseSign)},
    {SIP_MLNAME_CAST(sipName_Zero), meth_Twist_Zero, METH_VARARGS, SIP_MLDOC_CAST(doc_Twist_Zero)}
};


extern "C" {static PyObject *varget_Twist_rot(void *, PyObject *, PyObject *);}
static PyObject *varget_Twist_rot(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Vector*sipVal;
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -26);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->rot;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -25, sipPySelf);
        sipKeepReference(sipPySelf, -26, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Twist_rot(void *, PyObject *, PyObject *);}
static int varset_Twist_rot(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Vector*sipVal;
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Vector *>(sipForceConvertToType(sipPy, sipType_Vector, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->rot = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Twist_vel(void *, PyObject *, PyObject *);}
static PyObject *varget_Twist_vel(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Vector*sipVal;
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -28);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->vel;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -27, sipPySelf);
        sipKeepReference(sipPySelf, -28, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Twist_vel(void *, PyObject *, PyObject *);}
static int varset_Twist_vel(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Vector*sipVal;
     ::Twist *sipCpp = reinterpret_cast< ::Twist *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Vector *>(sipForceConvertToType(sipPy, sipType_Vector, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->vel = *sipVal;

    return 0;
}

sipVariableDef variables_Twist[] = {
    {InstanceVariable, sipName_rot, (PyMethodDef *)varget_Twist_rot, (PyMethodDef *)varset_Twist_rot, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_vel, (PyMethodDef *)varget_Twist_vel, (PyMethodDef *)varset_Twist_vel, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_Twist, "\1Twist()\n"
"Twist(_vel: Vector, _rot: Vector)\n"
"Twist(Twist)");


sipClassTypeDef sipTypeDef_PyKDL_Twist = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_Twist,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_Twist,
        {0, 0, 1},
        3, methods_Twist,
        0, SIP_NULLPTR,
        2, variables_Twist,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Twist,
    -1,
    -1,
    SIP_NULLPTR,
    slots_Twist,
    init_type_Twist,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Twist,
    assign_Twist,
    array_Twist,
    copy_Twist,
    release_Twist,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_Twist,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 201 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 1561 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

#line 102 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 1568 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 26 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 1574 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 281 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 1580 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 352 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 1586 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 189 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/rigidbodyinertia.hpp>
#include <kdl/kinfam_io.hpp>
using namespace KDL;
#line 1591 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 159 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 1595 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 21 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 1598 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Frame_DH_Craig1989, "DH_Craig1989(self, a: float, alpha: float, d: float, theta: float) -> Frame");

extern "C" {static PyObject *meth_Frame_DH_Craig1989(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Frame_DH_Craig1989(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;
        double a3;
         ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_a,
            sipName_alpha,
            sipName_d,
            sipName_theta,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bdddd", &sipSelf, sipType_Frame, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame(sipCpp->DH_Craig1989(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_Frame,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_DH_Craig1989, doc_Frame_DH_Craig1989);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Frame_DH, "DH(self, a: float, alpha: float, d: float, theta: float) -> Frame");

extern "C" {static PyObject *meth_Frame_DH(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Frame_DH(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;
        double a3;
         ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_a,
            sipName_alpha,
            sipName_d,
            sipName_theta,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bdddd", &sipSelf, sipType_Frame, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame(sipCpp->DH(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_Frame,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_DH, doc_Frame_DH);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Frame_Inverse, "Inverse(self) -> Frame\n"
"Inverse(self, arg: Vector) -> Vector\n"
"Inverse(self, arg: Wrench) -> Wrench\n"
"Inverse(self, arg: Twist) -> Twist");

extern "C" {static PyObject *meth_Frame_Inverse(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Frame_Inverse(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Frame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_Frame, &sipCpp))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame(sipCpp->Inverse());

            return sipConvertFromNewType(sipRes,sipType_Frame,SIP_NULLPTR);
        }
    }

    {
        const  ::Vector* a0;
        const  ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_arg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Frame, &sipCpp, sipType_Vector, &a0))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
        const  ::Wrench* a0;
        const  ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_arg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Frame, &sipCpp, sipType_Wrench, &a0))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    {
        const  ::Twist* a0;
        const  ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_arg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Frame, &sipCpp, sipType_Twist, &a0))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_Inverse, doc_Frame_Inverse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Frame_Identity, "Identity() -> Frame");

extern "C" {static PyObject *meth_Frame_Identity(PyObject *, PyObject *);}
static PyObject *meth_Frame_Identity(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame( ::Frame::Identity());

            return sipConvertFromNewType(sipRes,sipType_Frame,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_Identity, doc_Frame_Identity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Frame_Integrate, "Integrate(self, t_this: Twist, frequency: float)");

extern "C" {static PyObject *meth_Frame_Integrate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Frame_Integrate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Twist* a0;
        double a1;
         ::Frame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_t_this,
            sipName_frequency,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9d", &sipSelf, sipType_Frame, &sipCpp, sipType_Twist, &a0, &a1))
        {
            sipCpp->Integrate(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName_Integrate, doc_Frame_Integrate);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_Frame___eq__(PyObject *,PyObject *);}
static PyObject *slot_Frame___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Frame* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Frame, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, eq_slot, sipType_Frame, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Frame___ne__(PyObject *,PyObject *);}
static PyObject *slot_Frame___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Frame* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Frame, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, ne_slot, sipType_Frame, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Frame___mul__(PyObject *,PyObject *);}
static PyObject *slot_Frame___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Frame* a0;
        const  ::Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Vector, &a1))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
         ::Frame* a0;
        const  ::Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Wrench, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    {
         ::Frame* a0;
        const  ::Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Twist, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    {
        const  ::Frame* a0;
        const  ::Frame* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_Frame, &a1))
        {
             ::Frame*sipRes;

            sipRes = new  ::Frame((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Frame,SIP_NULLPTR);
        }
    }

    {
        const  ::Frame* a0;
        const  ::RigidBodyInertia* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_RigidBodyInertia, &a1))
        {
             ::RigidBodyInertia*sipRes;

            sipRes = new  ::RigidBodyInertia((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_RigidBodyInertia,SIP_NULLPTR);
        }
    }

    {
        const  ::Frame* a0;
        const  ::FrameVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Frame, &a0, sipType_FrameVel, &a1))
        {
             ::FrameVel*sipRes;

            sipRes = new  ::FrameVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_FrameVel,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Frame___repr__(PyObject *);}
static PyObject *slot_Frame___repr__(PyObject *sipSelf)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            const  ::std::string*sipRes = 0;

#line 243 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=&s;
#line 2007 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return sipConvertFromType(const_cast< ::std::string *>(sipRes),sipType_std_string,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static int slot_Frame___setitem__(PyObject *,PyObject *);}
static int slot_Frame___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "Td", &PyTuple_Type, &a0, &a1))
        {
#line 229 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    int i,j;
    PyArg_ParseTuple(a0,"ii",&i,&j);
    if (i < 0 || j < 0 || i > 2 || j > 3) {
        PyErr_SetString(PyExc_IndexError, "Frame index out of range");
        return 0;
    }
    if(j==3)
        (*sipCpp).p(i)=a1;
    else
        (*sipCpp).M(i,j)=a1;
#line 2044 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_Frame___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Frame___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Frame));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PyTuple_Type, &a0))
        {
            double sipRes = 0;

#line 218 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    int i,j;
    PyArg_ParseTuple(a0,"ii",&i,&j);
    if (i < 0 || j < 0 || i > 2 || j > 3) {
        PyErr_SetString(PyExc_IndexError, "Frame index out of range");
        return 0;
    }
    sipRes=(*sipCpp)(i,j);
#line 2082 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frame, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_Frame(void *, int);}
static void release_Frame(void *sipCppV, int)
{
    delete reinterpret_cast< ::Frame *>(sipCppV);
}


extern "C" {static PyObject *pickle_Frame(void *);}
static PyObject *pickle_Frame(void *sipCppV)
{
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipCppV);
    PyObject *sipRes;

#line 265 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    const sipTypeDef *vector_type = sipFindType("Vector");
    const sipTypeDef *rotation_type = sipFindType("Rotation");
    sipRes = Py_BuildValue("OO", sipConvertFromType(&(sipCpp->M), rotation_type, Py_None),
                                 sipConvertFromType(&(sipCpp->p), vector_type, Py_None));
#line 2114 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Frame(void *, SIP_SSIZE_T, void *);}
static void assign_Frame(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Frame *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Frame *>(sipSrc);
}


extern "C" {static void *array_Frame(SIP_SSIZE_T);}
static void *array_Frame(SIP_SSIZE_T sipNrElem)
{
    return new  ::Frame[sipNrElem];
}


extern "C" {static void *copy_Frame(const void *, SIP_SSIZE_T);}
static void *copy_Frame(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Frame(reinterpret_cast<const  ::Frame *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Frame(sipSimpleWrapper *);}
static void dealloc_Frame(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Frame(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Frame(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Frame(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Frame *sipCpp = SIP_NULLPTR;

    {
        const  ::Rotation* a0;
        const  ::Vector* a1;

        static const char *sipKwdList[] = {
            sipName_R,
            sipName_V,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9", sipType_Rotation, &a0, sipType_Vector, &a1))
        {
            sipCpp = new  ::Frame(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::Vector* a0;

        static const char *sipKwdList[] = {
            sipName_V,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_Vector, &a0))
        {
            sipCpp = new  ::Frame(*a0);

            return sipCpp;
        }
    }

    {
        const  ::Rotation* a0;

        static const char *sipKwdList[] = {
            sipName_R,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_Rotation, &a0))
        {
            sipCpp = new  ::Frame(*a0);

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Frame();

            return sipCpp;
        }
    }

    {
        const  ::Frame* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_Frame, &a0))
        {
            sipCpp = new  ::Frame(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Frame[] = {
    {(void *)slot_Frame___eq__, eq_slot},
    {(void *)slot_Frame___ne__, ne_slot},
    {(void *)slot_Frame___mul__, mul_slot},
    {(void *)slot_Frame___repr__, repr_slot},
    {(void *)slot_Frame___setitem__, setitem_slot},
    {(void *)slot_Frame___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Frame[] = {
    {SIP_MLNAME_CAST(sipName_DH), SIP_MLMETH_CAST(meth_Frame_DH), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Frame_DH)},
    {SIP_MLNAME_CAST(sipName_DH_Craig1989), SIP_MLMETH_CAST(meth_Frame_DH_Craig1989), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Frame_DH_Craig1989)},
    {SIP_MLNAME_CAST(sipName_Identity), meth_Frame_Identity, METH_VARARGS, SIP_MLDOC_CAST(doc_Frame_Identity)},
    {SIP_MLNAME_CAST(sipName_Integrate), SIP_MLMETH_CAST(meth_Frame_Integrate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Frame_Integrate)},
    {SIP_MLNAME_CAST(sipName_Inverse), SIP_MLMETH_CAST(meth_Frame_Inverse), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Frame_Inverse)}
};


extern "C" {static PyObject *varget_Frame_M(void *, PyObject *, PyObject *);}
static PyObject *varget_Frame_M(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Rotation*sipVal;
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -30);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->M;

    sipPy = sipConvertFromType(sipVal, sipType_Rotation, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -29, sipPySelf);
        sipKeepReference(sipPySelf, -30, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Frame_M(void *, PyObject *, PyObject *);}
static int varset_Frame_M(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Rotation*sipVal;
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Rotation *>(sipForceConvertToType(sipPy, sipType_Rotation, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->M = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_Frame_p(void *, PyObject *, PyObject *);}
static PyObject *varget_Frame_p(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
     ::Vector*sipVal;
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -32);

    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->p;

    sipPy = sipConvertFromType(sipVal, sipType_Vector, SIP_NULLPTR);

    if (sipPy)
    {
        sipKeepReference(sipPy, -31, sipPySelf);
        sipKeepReference(sipPySelf, -32, sipPy);
    }

    return sipPy;
}


extern "C" {static int varset_Frame_p(void *, PyObject *, PyObject *);}
static int varset_Frame_p(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Vector*sipVal;
     ::Frame *sipCpp = reinterpret_cast< ::Frame *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::Vector *>(sipForceConvertToType(sipPy, sipType_Vector, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->p = *sipVal;

    return 0;
}

sipVariableDef variables_Frame[] = {
    {InstanceVariable, sipName_M, (PyMethodDef *)varget_Frame_M, (PyMethodDef *)varset_Frame_M, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_p, (PyMethodDef *)varget_Frame_p, (PyMethodDef *)varset_Frame_p, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_Frame, "\1Frame(R: Rotation, V: Vector)\n"
"Frame(V: Vector)\n"
"Frame(R: Rotation)\n"
"Frame()\n"
"Frame(Frame)");


sipClassTypeDef sipTypeDef_PyKDL_Frame = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_Frame,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_Frame,
        {0, 0, 1},
        5, methods_Frame,
        0, SIP_NULLPTR,
        2, variables_Frame,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Frame,
    -1,
    -1,
    SIP_NULLPTR,
    slots_Frame,
    init_type_Frame,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Frame,
    assign_Frame,
    array_Frame,
    copy_Frame,
    release_Frame,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_Frame,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 102 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2408 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

#line 26 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2415 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 281 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2421 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 352 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 2427 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 189 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/kinfam.sip"
#include <kdl/rigidbodyinertia.hpp>
#include <kdl/kinfam_io.hpp>
using namespace KDL;
#line 2432 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 44 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 2436 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 100 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 2440 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 21 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 2443 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Rotation_SetInverse, "SetInverse(self)");

extern "C" {static PyObject *meth_Rotation_SetInverse(PyObject *, PyObject *);}
static PyObject *meth_Rotation_SetInverse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            sipCpp->SetInverse();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_SetInverse, doc_Rotation_SetInverse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_Inverse, "Inverse(self) -> Rotation\n"
"Inverse(self, v: Vector) -> Vector\n"
"Inverse(self, w: Wrench) -> Wrench\n"
"Inverse(self, t: Twist) -> Twist");

extern "C" {static PyObject *meth_Rotation_Inverse(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_Inverse(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Rotation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation(sipCpp->Inverse());

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    {
        const  ::Vector* a0;
        const  ::Rotation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_v,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Vector, &a0))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
        const  ::Wrench* a0;
        const  ::Rotation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_w,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Wrench, &a0))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    {
        const  ::Twist* a0;
        const  ::Rotation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_t,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Twist, &a0))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist(sipCpp->Inverse(*a0));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_Inverse, doc_Rotation_Inverse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_Identity, "Identity() -> Rotation");

extern "C" {static PyObject *meth_Rotation_Identity(PyObject *, PyObject *);}
static PyObject *meth_Rotation_Identity(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation( ::Rotation::Identity());

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_Identity, doc_Rotation_Identity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_RotX, "RotX(angle: float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_RotX(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_RotX(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;

        static const char *sipKwdList[] = {
            sipName_angle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "d", &a0))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation( ::Rotation::RotX(a0));

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_RotX, doc_Rotation_RotX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_RotY, "RotY(angle: float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_RotY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_RotY(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;

        static const char *sipKwdList[] = {
            sipName_angle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "d", &a0))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation( ::Rotation::RotY(a0));

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_RotY, doc_Rotation_RotY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_RotZ, "RotZ(angle: float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_RotZ(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_RotZ(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;

        static const char *sipKwdList[] = {
            sipName_angle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "d", &a0))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation( ::Rotation::RotZ(a0));

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_RotZ, doc_Rotation_RotZ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_Rot, "Rot(vec: Vector, angle: float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_Rot(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_Rot(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;
        double a1;

        static const char *sipKwdList[] = {
            sipName_vec,
            sipName_angle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9d", sipType_Vector, &a0, &a1))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation( ::Rotation::Rot(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_Rot, doc_Rotation_Rot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_Rot2, "Rot2(vec: Vector, angle: float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_Rot2(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_Rot2(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;
        double a1;

        static const char *sipKwdList[] = {
            sipName_vec,
            sipName_angle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9d", sipType_Vector, &a0, &a1))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation( ::Rotation::Rot2(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_Rot2, doc_Rotation_Rot2);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_EulerZYZ, "EulerZYZ(Alfa: float, Beta: float, Gamma: float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_EulerZYZ(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_EulerZYZ(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;

        static const char *sipKwdList[] = {
            sipName_Alfa,
            sipName_Beta,
            sipName_Gamma,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ddd", &a0, &a1, &a2))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation( ::Rotation::EulerZYZ(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_EulerZYZ, doc_Rotation_EulerZYZ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_RPY, "RPY(roll: float, pitch: float, yaw: float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_RPY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_RPY(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;

        static const char *sipKwdList[] = {
            sipName_roll,
            sipName_pitch,
            sipName_yaw,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ddd", &a0, &a1, &a2))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation( ::Rotation::RPY(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_RPY, doc_Rotation_RPY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_EulerZYX, "EulerZYX(Alfa: float, Beta: float, Gamma: float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_EulerZYX(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_EulerZYX(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;

        static const char *sipKwdList[] = {
            sipName_Alfa,
            sipName_Beta,
            sipName_Gamma,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ddd", &a0, &a1, &a2))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation( ::Rotation::EulerZYX(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_EulerZYX, doc_Rotation_EulerZYX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_Quaternion, "Quaternion(x: float, y: float, z: float, w: float) -> Rotation");

extern "C" {static PyObject *meth_Rotation_Quaternion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_Quaternion(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;
        double a3;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_z,
            sipName_w,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "dddd", &a0, &a1, &a2, &a3))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation( ::Rotation::Quaternion(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_Quaternion, doc_Rotation_Quaternion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_DoRotX, "DoRotX(self, angle: float)");

extern "C" {static PyObject *meth_Rotation_DoRotX(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_DoRotX(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::Rotation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_angle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd", &sipSelf, sipType_Rotation, &sipCpp, &a0))
        {
            sipCpp->DoRotX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_DoRotX, doc_Rotation_DoRotX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_DoRotY, "DoRotY(self, angle: float)");

extern "C" {static PyObject *meth_Rotation_DoRotY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_DoRotY(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::Rotation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_angle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd", &sipSelf, sipType_Rotation, &sipCpp, &a0))
        {
            sipCpp->DoRotY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_DoRotY, doc_Rotation_DoRotY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_DoRotZ, "DoRotZ(self, angle: float)");

extern "C" {static PyObject *meth_Rotation_DoRotZ(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_DoRotZ(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::Rotation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_angle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd", &sipSelf, sipType_Rotation, &sipCpp, &a0))
        {
            sipCpp->DoRotZ(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_DoRotZ, doc_Rotation_DoRotZ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_GetRot, "GetRot(self) -> Vector");

extern "C" {static PyObject *meth_Rotation_GetRot(PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetRot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Rotation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector(sipCpp->GetRot());

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetRot, doc_Rotation_GetRot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_GetRotAngle, "GetRotAngle(self, eps: float = epsilon) -> Tuple[float, Vector]");

extern "C" {static PyObject *meth_Rotation_GetRotAngle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetRotAngle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Vector* a0;
        double a1 = epsilon;
        const  ::Rotation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_eps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|d", &sipSelf, sipType_Rotation, &sipCpp, &a1))
        {
            double sipRes;
            a0 = new  ::Vector();

            sipRes = sipCpp->GetRotAngle(*a0,a1);

            return sipBuildResult(0,"(dN)",sipRes,a0,sipType_Vector,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetRotAngle, doc_Rotation_GetRotAngle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_GetEulerZYZ, "GetEulerZYZ(self) -> Tuple[float, float, float]");

extern "C" {static PyObject *meth_Rotation_GetEulerZYZ(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetEulerZYZ(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;
        const  ::Rotation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            sipCpp->GetEulerZYZ(a0,a1,a2);

            return sipBuildResult(0,"(ddd)",a0,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetEulerZYZ, doc_Rotation_GetEulerZYZ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_GetRPY, "GetRPY(self) -> Tuple[float, float, float]");

extern "C" {static PyObject *meth_Rotation_GetRPY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetRPY(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;
        const  ::Rotation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            sipCpp->GetRPY(a0,a1,a2);

            return sipBuildResult(0,"(ddd)",a0,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetRPY, doc_Rotation_GetRPY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_GetEulerZYX, "GetEulerZYX(self) -> Tuple[float, float, float]");

extern "C" {static PyObject *meth_Rotation_GetEulerZYX(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetEulerZYX(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;
        const  ::Rotation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            sipCpp->GetEulerZYX(a0,a1,a2);

            return sipBuildResult(0,"(ddd)",a0,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetEulerZYX, doc_Rotation_GetEulerZYX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_GetQuaternion, "GetQuaternion(self) -> Tuple[float, float, float, float]");

extern "C" {static PyObject *meth_Rotation_GetQuaternion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_GetQuaternion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;
        double a2;
        double a3;
        const  ::Rotation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
            sipCpp->GetQuaternion(a0,a1,a2,a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_GetQuaternion, doc_Rotation_GetQuaternion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_UnitX, "UnitX(self) -> Vector\n"
"UnitX(self, X: Vector)");

extern "C" {static PyObject *meth_Rotation_UnitX(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_UnitX(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Rotation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector(sipCpp->UnitX());

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
        const  ::Vector* a0;
         ::Rotation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_X,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Vector, &a0))
        {
            sipCpp->UnitX(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_UnitX, doc_Rotation_UnitX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_UnitY, "UnitY(self) -> Vector\n"
"UnitY(self, X: Vector)");

extern "C" {static PyObject *meth_Rotation_UnitY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_UnitY(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Rotation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector(sipCpp->UnitY());

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
        const  ::Vector* a0;
         ::Rotation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_X,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Vector, &a0))
        {
            sipCpp->UnitY(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_UnitY, doc_Rotation_UnitY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Rotation_UnitZ, "UnitZ(self) -> Vector\n"
"UnitZ(self, X: Vector)");

extern "C" {static PyObject *meth_Rotation_UnitZ(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Rotation_UnitZ(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Rotation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_Rotation, &sipCpp))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector(sipCpp->UnitZ());

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
        const  ::Vector* a0;
         ::Rotation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_X,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_Rotation, &sipCpp, sipType_Vector, &a0))
        {
            sipCpp->UnitZ(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName_UnitZ, doc_Rotation_UnitZ);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_Rotation___eq__(PyObject *,PyObject *);}
static PyObject *slot_Rotation___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Rotation *sipCpp = reinterpret_cast< ::Rotation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Rotation));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Rotation* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Rotation, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, eq_slot, sipType_Rotation, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Rotation___ne__(PyObject *,PyObject *);}
static PyObject *slot_Rotation___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Rotation *sipCpp = reinterpret_cast< ::Rotation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Rotation));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Rotation* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Rotation, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, ne_slot, sipType_Rotation, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Rotation___mul__(PyObject *,PyObject *);}
static PyObject *slot_Rotation___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Rotation* a0;
        const  ::Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_Vector, &a1))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
         ::Rotation* a0;
        const  ::Twist* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_Twist, &a1))
        {
             ::Twist*sipRes;

            sipRes = new  ::Twist((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Twist,SIP_NULLPTR);
        }
    }

    {
         ::Rotation* a0;
        const  ::Wrench* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_Wrench, &a1))
        {
             ::Wrench*sipRes;

            sipRes = new  ::Wrench((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Wrench,SIP_NULLPTR);
        }
    }

    {
        const  ::Rotation* a0;
        const  ::Rotation* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_Rotation, &a1))
        {
             ::Rotation*sipRes;

            sipRes = new  ::Rotation((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Rotation,SIP_NULLPTR);
        }
    }

    {
        const  ::Rotation* a0;
        const  ::RigidBodyInertia* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_RigidBodyInertia, &a1))
        {
             ::RigidBodyInertia*sipRes;

            sipRes = new  ::RigidBodyInertia((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_RigidBodyInertia,SIP_NULLPTR);
        }
    }

    {
        const  ::Rotation* a0;
        const  ::VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_VectorVel, &a1))
        {
             ::VectorVel*sipRes;

            sipRes = new  ::VectorVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,SIP_NULLPTR);
        }
    }

    {
        const  ::Rotation* a0;
        const  ::RotationVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Rotation, &a0, sipType_RotationVel, &a1))
        {
             ::RotationVel*sipRes;

            sipRes = new  ::RotationVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_RotationVel,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Rotation___repr__(PyObject *);}
static PyObject *slot_Rotation___repr__(PyObject *sipSelf)
{
     ::Rotation *sipCpp = reinterpret_cast< ::Rotation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Rotation));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            const  ::std::string*sipRes = 0;

#line 139 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=&s;
#line 3508 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return sipConvertFromType(const_cast< ::std::string *>(sipRes),sipType_std_string,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static int slot_Rotation___setitem__(PyObject *,PyObject *);}
static int slot_Rotation___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::Rotation *sipCpp = reinterpret_cast< ::Rotation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Rotation));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "Td", &PyTuple_Type, &a0, &a1))
        {
#line 128 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    int i,j;
    PyArg_ParseTuple(a0,"ii",&i,&j);
    if (i < 0 || j < 0 || i > 2 || j > 2) {
        PyErr_SetString(PyExc_IndexError, "Rotation index out of range");
        return 0;
    }
    (*sipCpp)(i,j)=a1;
#line 3542 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_Rotation___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Rotation___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Rotation *sipCpp = reinterpret_cast< ::Rotation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Rotation));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PyTuple_Type, &a0))
        {
            double sipRes = 0;

#line 117 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    int i,j;
    PyArg_ParseTuple(a0, "ii", &i, &j);
    if (i < 0 || j < 0 || i > 2 || j > 2) {
        PyErr_SetString(PyExc_IndexError, "Rotation index out of range");
        return 0;
    }
    sipRes=((const Rotation)(*sipCpp))(i,j);
#line 3580 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rotation, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_Rotation(void *, int);}
static void release_Rotation(void *sipCppV, int)
{
    delete reinterpret_cast< ::Rotation *>(sipCppV);
}


extern "C" {static PyObject *pickle_Rotation(void *);}
static PyObject *pickle_Rotation(void *sipCppV)
{
     ::Rotation *sipCpp = reinterpret_cast< ::Rotation *>(sipCppV);
    PyObject *sipRes;

#line 188 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    sipRes = Py_BuildValue("ddddddddd", (*sipCpp)(0,0), (*sipCpp)(0,1), (*sipCpp)(0,2),
                                        (*sipCpp)(1,0), (*sipCpp)(1,1), (*sipCpp)(1,2),
                                        (*sipCpp)(2,0), (*sipCpp)(2,1), (*sipCpp)(2,2));
#line 3611 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Rotation(void *, SIP_SSIZE_T, void *);}
static void assign_Rotation(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Rotation *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Rotation *>(sipSrc);
}


extern "C" {static void *array_Rotation(SIP_SSIZE_T);}
static void *array_Rotation(SIP_SSIZE_T sipNrElem)
{
    return new  ::Rotation[sipNrElem];
}


extern "C" {static void *copy_Rotation(const void *, SIP_SSIZE_T);}
static void *copy_Rotation(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Rotation(reinterpret_cast<const  ::Rotation *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Rotation(sipSimpleWrapper *);}
static void dealloc_Rotation(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Rotation(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Rotation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Rotation(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Rotation *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Rotation();

            return sipCpp;
        }
    }

    {
        double a0;
        double a1;
        double a2;
        double a3;
        double a4;
        double a5;
        double a6;
        double a7;
        double a8;

        static const char *sipKwdList[] = {
            sipName_Xx,
            sipName_Yx,
            sipName_Zx,
            sipName_Xy,
            sipName_Yy,
            sipName_Zy,
            sipName_Xz,
            sipName_Yz,
            sipName_Zz,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ddddddddd", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp = new  ::Rotation(a0,a1,a2,a3,a4,a5,a6,a7,a8);

            return sipCpp;
        }
    }

    {
        const  ::Vector* a0;
        const  ::Vector* a1;
        const  ::Vector* a2;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_z,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9J9", sipType_Vector, &a0, sipType_Vector, &a1, sipType_Vector, &a2))
        {
            sipCpp = new  ::Rotation(*a0,*a1,*a2);

            return sipCpp;
        }
    }

    {
        const  ::Rotation* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_Rotation, &a0))
        {
            sipCpp = new  ::Rotation(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Rotation[] = {
    {(void *)slot_Rotation___eq__, eq_slot},
    {(void *)slot_Rotation___ne__, ne_slot},
    {(void *)slot_Rotation___mul__, mul_slot},
    {(void *)slot_Rotation___repr__, repr_slot},
    {(void *)slot_Rotation___setitem__, setitem_slot},
    {(void *)slot_Rotation___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Rotation[] = {
    {SIP_MLNAME_CAST(sipName_DoRotX), SIP_MLMETH_CAST(meth_Rotation_DoRotX), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_DoRotX)},
    {SIP_MLNAME_CAST(sipName_DoRotY), SIP_MLMETH_CAST(meth_Rotation_DoRotY), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_DoRotY)},
    {SIP_MLNAME_CAST(sipName_DoRotZ), SIP_MLMETH_CAST(meth_Rotation_DoRotZ), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_DoRotZ)},
    {SIP_MLNAME_CAST(sipName_EulerZYX), SIP_MLMETH_CAST(meth_Rotation_EulerZYX), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_EulerZYX)},
    {SIP_MLNAME_CAST(sipName_EulerZYZ), SIP_MLMETH_CAST(meth_Rotation_EulerZYZ), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_EulerZYZ)},
    {SIP_MLNAME_CAST(sipName_GetEulerZYX), SIP_MLMETH_CAST(meth_Rotation_GetEulerZYX), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_GetEulerZYX)},
    {SIP_MLNAME_CAST(sipName_GetEulerZYZ), SIP_MLMETH_CAST(meth_Rotation_GetEulerZYZ), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_GetEulerZYZ)},
    {SIP_MLNAME_CAST(sipName_GetQuaternion), SIP_MLMETH_CAST(meth_Rotation_GetQuaternion), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_GetQuaternion)},
    {SIP_MLNAME_CAST(sipName_GetRPY), SIP_MLMETH_CAST(meth_Rotation_GetRPY), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_GetRPY)},
    {SIP_MLNAME_CAST(sipName_GetRot), meth_Rotation_GetRot, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_GetRot)},
    {SIP_MLNAME_CAST(sipName_GetRotAngle), SIP_MLMETH_CAST(meth_Rotation_GetRotAngle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_GetRotAngle)},
    {SIP_MLNAME_CAST(sipName_Identity), meth_Rotation_Identity, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_Identity)},
    {SIP_MLNAME_CAST(sipName_Inverse), SIP_MLMETH_CAST(meth_Rotation_Inverse), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_Inverse)},
    {SIP_MLNAME_CAST(sipName_Quaternion), SIP_MLMETH_CAST(meth_Rotation_Quaternion), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_Quaternion)},
    {SIP_MLNAME_CAST(sipName_RPY), SIP_MLMETH_CAST(meth_Rotation_RPY), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_RPY)},
    {SIP_MLNAME_CAST(sipName_Rot), SIP_MLMETH_CAST(meth_Rotation_Rot), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_Rot)},
    {SIP_MLNAME_CAST(sipName_Rot2), SIP_MLMETH_CAST(meth_Rotation_Rot2), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_Rot2)},
    {SIP_MLNAME_CAST(sipName_RotX), SIP_MLMETH_CAST(meth_Rotation_RotX), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_RotX)},
    {SIP_MLNAME_CAST(sipName_RotY), SIP_MLMETH_CAST(meth_Rotation_RotY), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_RotY)},
    {SIP_MLNAME_CAST(sipName_RotZ), SIP_MLMETH_CAST(meth_Rotation_RotZ), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_RotZ)},
    {SIP_MLNAME_CAST(sipName_SetInverse), meth_Rotation_SetInverse, METH_VARARGS, SIP_MLDOC_CAST(doc_Rotation_SetInverse)},
    {SIP_MLNAME_CAST(sipName_UnitX), SIP_MLMETH_CAST(meth_Rotation_UnitX), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_UnitX)},
    {SIP_MLNAME_CAST(sipName_UnitY), SIP_MLMETH_CAST(meth_Rotation_UnitY), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_UnitY)},
    {SIP_MLNAME_CAST(sipName_UnitZ), SIP_MLMETH_CAST(meth_Rotation_UnitZ), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Rotation_UnitZ)}
};

PyDoc_STRVAR(doc_Rotation, "\1Rotation()\n"
"Rotation(Xx: float, Yx: float, Zx: float, Xy: float, Yy: float, Zy: float, Xz: float, Yz: float, Zz: float)\n"
"Rotation(x: Vector, y: Vector, z: Vector)\n"
"Rotation(Rotation)");


sipClassTypeDef sipTypeDef_PyKDL_Rotation = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_Rotation,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_Rotation,
        {0, 0, 1},
        24, methods_Rotation,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Rotation,
    -1,
    -1,
    SIP_NULLPTR,
    slots_Rotation,
    init_type_Rotation,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Rotation,
    assign_Rotation,
    array_Rotation,
    copy_Rotation,
    release_Rotation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_Rotation,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
#include <kdl/frames.hpp>
#include <kdl/frames_io.hpp>
#include <sstream>
using namespace KDL;
#line 3830 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

#line 44 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/framevel.sip"
#include <kdl/framevel.hpp>
using namespace KDL;
#line 3835 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
#line 21 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 3838 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"


PyDoc_STRVAR(doc_Vector_x, "x(self, float)\n"
"x(self) -> float");

extern "C" {static PyObject *meth_Vector_x(PyObject *, PyObject *);}
static PyObject *meth_Vector_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::Vector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Vector, &sipCpp, &a0))
        {
            sipCpp->x(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::Vector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vector, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vector, sipName_x, doc_Vector_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Vector_y, "y(self, float)\n"
"y(self) -> float");

extern "C" {static PyObject *meth_Vector_y(PyObject *, PyObject *);}
static PyObject *meth_Vector_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::Vector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Vector, &sipCpp, &a0))
        {
            sipCpp->y(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::Vector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vector, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vector, sipName_y, doc_Vector_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Vector_z, "z(self, float)\n"
"z(self) -> float");

extern "C" {static PyObject *meth_Vector_z(PyObject *, PyObject *);}
static PyObject *meth_Vector_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::Vector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Vector, &sipCpp, &a0))
        {
            sipCpp->z(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::Vector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vector, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->z();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vector, sipName_z, doc_Vector_z);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Vector_ReverseSign, "ReverseSign(self)");

extern "C" {static PyObject *meth_Vector_ReverseSign(PyObject *, PyObject *);}
static PyObject *meth_Vector_ReverseSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Vector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vector, &sipCpp))
        {
            sipCpp->ReverseSign();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vector, sipName_ReverseSign, doc_Vector_ReverseSign);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Vector_Zero, "Zero() -> Vector");

extern "C" {static PyObject *meth_Vector_Zero(PyObject *, PyObject *);}
static PyObject *meth_Vector_Zero(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector( ::Vector::Zero());

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vector, sipName_Zero, doc_Vector_Zero);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Vector_Norm, "Norm(self) -> float");

extern "C" {static PyObject *meth_Vector_Norm(PyObject *, PyObject *);}
static PyObject *meth_Vector_Norm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Vector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vector, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->Norm();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vector, sipName_Norm, doc_Vector_Norm);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Vector_Normalize, "Normalize(self, eps: float = epsilon) -> float");

extern "C" {static PyObject *meth_Vector_Normalize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Vector_Normalize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0 = epsilon;
         ::Vector *sipCpp;

        static const char *sipKwdList[] = {
            sipName_eps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|d", &sipSelf, sipType_Vector, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->Normalize(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vector, sipName_Normalize, doc_Vector_Normalize);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_Vector___neg__(PyObject *);}
static PyObject *slot_Vector___neg__(PyObject *sipSelf)
{
     ::Vector *sipCpp = reinterpret_cast< ::Vector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vector));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Vector___mul__(PyObject *,PyObject *);}
static PyObject *slot_Vector___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Vector, &a0, &a1))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
        double a0;
        const  ::Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_Vector, &a1))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
        const  ::Vector* a0;
        const  ::Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Vector, &a0, sipType_Vector, &a1))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
        const  ::Vector* a0;
        const  ::VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Vector, &a0, sipType_VectorVel, &a1))
        {
             ::VectorVel*sipRes;

            sipRes = new  ::VectorVel((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Vector___div__(PyObject *,PyObject *);}
static PyObject *slot_Vector___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_Vector, &a0, &a1))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Vector___add__(PyObject *,PyObject *);}
static PyObject *slot_Vector___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;
        const  ::Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Vector, &a0, sipType_Vector, &a1))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
        const  ::Vector* a0;
        const  ::VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Vector, &a0, sipType_VectorVel, &a1))
        {
             ::VectorVel*sipRes;

            sipRes = new  ::VectorVel((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Vector___sub__(PyObject *,PyObject *);}
static PyObject *slot_Vector___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;
        const  ::Vector* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Vector, &a0, sipType_Vector, &a1))
        {
             ::Vector*sipRes;

            sipRes = new  ::Vector((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_Vector,SIP_NULLPTR);
        }
    }

    {
        const  ::Vector* a0;
        const  ::VectorVel* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Vector, &a0, sipType_VectorVel, &a1))
        {
             ::VectorVel*sipRes;

            sipRes = new  ::VectorVel((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_VectorVel,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Vector___eq__(PyObject *,PyObject *);}
static PyObject *slot_Vector___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Vector *sipCpp = reinterpret_cast< ::Vector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vector));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Vector, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, eq_slot, sipType_Vector, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Vector___ne__(PyObject *,PyObject *);}
static PyObject *slot_Vector___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Vector *sipCpp = reinterpret_cast< ::Vector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vector));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Vector, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_PyKDL, ne_slot, sipType_Vector, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Vector___iadd__(PyObject *,PyObject *);}
static PyObject *slot_Vector___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Vector)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Vector *sipCpp = reinterpret_cast< ::Vector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vector));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Vector, &a0))
        {
            sipCpp-> ::Vector::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Vector___isub__(PyObject *,PyObject *);}
static PyObject *slot_Vector___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Vector)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Vector *sipCpp = reinterpret_cast< ::Vector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vector));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Vector* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Vector, &a0))
        {
            sipCpp-> ::Vector::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Vector___repr__(PyObject *);}
static PyObject *slot_Vector___repr__(PyObject *sipSelf)
{
     ::Vector *sipCpp = reinterpret_cast< ::Vector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vector));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            const  ::std::string*sipRes = 0;

#line 65 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    std::ostringstream oss;
    oss<<(*sipCpp);
    std::string s(oss.str());
    sipRes=&s;
#line 4451 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return sipConvertFromType(const_cast< ::std::string *>(sipRes),sipType_std_string,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static int slot_Vector___setitem__(PyObject *,PyObject *);}
static int slot_Vector___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::Vector *sipCpp = reinterpret_cast< ::Vector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vector));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "id", &a0, &a1))
        {
#line 56 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 2) {
        PyErr_SetString(PyExc_IndexError, "Vector index out of range");
        return 0;
    }
    (*sipCpp)(a0)=a1;
#line 4483 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vector, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_Vector___getitem__(PyObject *,PyObject *);}
static PyObject *slot_Vector___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Vector *sipCpp = reinterpret_cast< ::Vector *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vector));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            double sipRes = 0;

#line 47 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    if (a0 < 0 || a0 > 2) {
	    PyErr_SetString(PyExc_IndexError, "Vector index out of range");
	    return 0;
    }
    sipRes=(*sipCpp)(a0);
#line 4519 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vector, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_Vector(void *, int);}
static void release_Vector(void *sipCppV, int)
{
    delete reinterpret_cast< ::Vector *>(sipCppV);
}


extern "C" {static PyObject *pickle_Vector(void *);}
static PyObject *pickle_Vector(void *sipCppV)
{
     ::Vector *sipCpp = reinterpret_cast< ::Vector *>(sipCppV);
    PyObject *sipRes;

#line 82 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/frames.sip"
    sipRes = Py_BuildValue("ddd", sipCpp->x(), sipCpp->y(), sipCpp->z());
#line 4548 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"

    return sipRes;
}


extern "C" {static void assign_Vector(void *, SIP_SSIZE_T, void *);}
static void assign_Vector(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Vector *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Vector *>(sipSrc);
}


extern "C" {static void *array_Vector(SIP_SSIZE_T);}
static void *array_Vector(SIP_SSIZE_T sipNrElem)
{
    return new  ::Vector[sipNrElem];
}


extern "C" {static void *copy_Vector(const void *, SIP_SSIZE_T);}
static void *copy_Vector(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Vector(reinterpret_cast<const  ::Vector *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Vector(sipSimpleWrapper *);}
static void dealloc_Vector(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Vector(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Vector(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Vector(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Vector *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Vector();

            return sipCpp;
        }
    }

    {
        double a0;
        double a1;
        double a2;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_z,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ddd", &a0, &a1, &a2))
        {
            sipCpp = new  ::Vector(a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::Vector* a0;

        static const char *sipKwdList[] = {
            sipName_arg,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_Vector, &a0))
        {
            sipCpp = new  ::Vector(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Vector[] = {
    {(void *)slot_Vector___neg__, neg_slot},
    {(void *)slot_Vector___mul__, mul_slot},
    {(void *)slot_Vector___div__, div_slot},
    {(void *)slot_Vector___add__, add_slot},
    {(void *)slot_Vector___sub__, sub_slot},
    {(void *)slot_Vector___eq__, eq_slot},
    {(void *)slot_Vector___ne__, ne_slot},
    {(void *)slot_Vector___iadd__, iadd_slot},
    {(void *)slot_Vector___isub__, isub_slot},
    {(void *)slot_Vector___repr__, repr_slot},
    {(void *)slot_Vector___setitem__, setitem_slot},
    {(void *)slot_Vector___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Vector[] = {
    {SIP_MLNAME_CAST(sipName_Norm), meth_Vector_Norm, METH_VARARGS, SIP_MLDOC_CAST(doc_Vector_Norm)},
    {SIP_MLNAME_CAST(sipName_Normalize), SIP_MLMETH_CAST(meth_Vector_Normalize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Vector_Normalize)},
    {SIP_MLNAME_CAST(sipName_ReverseSign), meth_Vector_ReverseSign, METH_VARARGS, SIP_MLDOC_CAST(doc_Vector_ReverseSign)},
    {SIP_MLNAME_CAST(sipName_Zero), meth_Vector_Zero, METH_VARARGS, SIP_MLDOC_CAST(doc_Vector_Zero)},
    {SIP_MLNAME_CAST(sipName_x), meth_Vector_x, METH_VARARGS, SIP_MLDOC_CAST(doc_Vector_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_Vector_y, METH_VARARGS, SIP_MLDOC_CAST(doc_Vector_y)},
    {SIP_MLNAME_CAST(sipName_z), meth_Vector_z, METH_VARARGS, SIP_MLDOC_CAST(doc_Vector_z)}
};

PyDoc_STRVAR(doc_Vector, "\1Vector()\n"
"Vector(x: float, y: float, z: float)\n"
"Vector(arg: Vector)");


sipClassTypeDef sipTypeDef_PyKDL_Vector = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_Vector,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_Vector,
        {0, 0, 1},
        7, methods_Vector,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Vector,
    -1,
    -1,
    SIP_NULLPTR,
    slots_Vector,
    init_type_Vector,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Vector,
    assign_Vector,
    array_Vector,
    copy_Vector,
    release_Vector,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_Vector,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 21 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
#include <string>
#line 4724 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"



extern "C" {static void assign_std_string(void *, SIP_SSIZE_T, void *);}
static void assign_std_string(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::std::string *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::std::string *>(sipSrc);
}


extern "C" {static void *array_std_string(SIP_SSIZE_T);}
static void *array_std_string(SIP_SSIZE_T sipNrElem)
{
    return new  ::std::string[sipNrElem];
}


extern "C" {static void *copy_std_string(const void *, SIP_SSIZE_T);}
static void *copy_std_string(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::std::string(reinterpret_cast<const  ::std::string *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_string(void *, int);}
static void release_std_string(void *ptr, int)
{
    delete reinterpret_cast< ::std::string *>(ptr);
}



extern "C" {static int convertTo_std_string(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_string(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *)
{
     ::std::string **sipCppPtr = reinterpret_cast< ::std::string **>(sipCppPtrV);

#line 36 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
     // Allow a Python string (or a unicode string) whenever a string is
     // expected.
    // If argument is a Unicode string, just decode it to UTF-8
    // If argument is a Python string, assume it's UTF-8
     if (sipIsErr == NULL)
#if PY_MAJOR_VERSION < 3
        return (PyString_Check(sipPy) || PyUnicode_Check(sipPy));
#else
        return PyUnicode_Check(sipPy);
#endif
     if (sipPy == Py_None) {
        *sipCppPtr = new std::string;
         return 1;
     }
#if PY_MAJOR_VERSION < 3
     if (PyUnicode_Check(sipPy)) {
        PyObject* s = PyUnicode_AsUTF8String(sipPy);
        *sipCppPtr = new std::string(PyString_AS_STRING(s));
        Py_DECREF(s);
        return 1;
     }
     else if (PyString_Check(sipPy)) {
        *sipCppPtr = new std::string(PyString_AS_STRING(sipPy));
        return 1;
     }
#else
     if (PyUnicode_Check(sipPy)) {
        *sipCppPtr = new std::string(PyUnicode_AsUTF8(sipPy));
        return 1;
     }
#endif

     return 0;
#line 4797 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
}


extern "C" {static PyObject *convertFrom_std_string(void *, PyObject *);}
static PyObject *convertFrom_std_string(void *sipCppV, PyObject *)
{
    ::std::string *sipCpp = reinterpret_cast< ::std::string *>(sipCppV);

#line 25 "/home/songhat/catkin_ws/src/orocos_kinematics_dynamics/python_orocos_kdl/PyKDL/std_string.sip"
    // convert an std::string to a Python (unicode) string
    PyObject* newstring;
    newstring = PyUnicode_DecodeUTF8(sipCpp->c_str(), sipCpp->length(), NULL);
    if(newstring == NULL) {
        PyErr_Clear();
        newstring = PyUnicode_FromString(sipCpp->c_str());
    }
    return newstring;
#line 4815 "/home/songhat/catkin_ws/build/python_orocos_kdl/PyKDL/sipPyKDLpart6.cpp"
}


sipMappedTypeDef sipTypeDef_PyKDL_std_string = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_std__string,     /* std::string */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_string,
    array_std_string,
    copy_std_string,
    release_std_string,
    convertTo_std_string,
    convertFrom_std_string
};
