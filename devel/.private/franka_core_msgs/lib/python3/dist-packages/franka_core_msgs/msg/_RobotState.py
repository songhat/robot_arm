# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from franka_core_msgs/RobotState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import franka_msgs.msg
import std_msgs.msg

class RobotState(genpy.Message):
  _md5sum = "380ed6f93e2f9638a809e6b00ef7462c"
  _type = "franka_core_msgs/RobotState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

float64[6] cartesian_collision
float64[6] cartesian_contact
float64[6] O_dP_EE # EE vel computed as J*dq

# float64[7] q # joint position, velocity, and effort in joint_states topic
# float64[7] dq

float64[7] q_d
float64[7] dq_d
# float64[7] tau_J
float64[7] dtau_J # torque derivative
float64[7] tau_J_d # desired joint torque
# float64[6] K_F_ext_hat_K
# float64[2] elbow
# float64[2] elbow_d

float64[7] joint_collision
float64[7] joint_contact

# float64[6] O_F_ext_hat_K # in tip state

float64[7] tau_ext_hat_filtered # filtered external torque
float64[3] F_x_Cee # Configured center of mass of the end effector load with respect to flange frame.
float64[3] F_x_Cload # Configured center of mass of the external load with respect to flange frame.
float64[3] F_x_Ctotal # Combined center of mass of the end effector load and the external load with respect to flange frame.
float64[9] I_ee # Configured rotational inertia matrix of the end effector load with respect to center of mass.
float64[9] I_load
float64[9] I_total

float64 m_ee # configured mass of end-effector
float64 m_load # configured mass of external load
float64 m_total


float64[7] gravity
float64[7] coriolis
float64[49] mass_matrix # mass matrix of end-effector wrt base frame # Vectorized 7x7, column-major

float64[42] O_Jac_EE # zero jacobian of end-effector frame. Vectorized 6x7 Jacobian, column-major

# float64[16] O_T_EE # ----- moved to endpointstate msg # Vectorized 4x4, column-major
float64[16] O_T_EE_d # Last desired end effector pose of motion generation in base frame.  # Vectorized 4x4, column-major
float64[16] F_T_EE # End effector frame pose in flange frame # Vectorized 4x4, column-major
float64[16] F_T_NE # Nominal End effector frame pose in flange frame (fixed in Desk) # Vectorized 4x4, column-major
float64[16] NE_T_EE # End effector frame pose in Nominal End effector frame # Vectorized 4x4, column-major
float64[16] EE_T_K # Stiffness frame pose in end effector frame # Vectorized 4x4, column-major
float64 time

uint8 ROBOT_MODE_OTHER=0
uint8 ROBOT_MODE_IDLE=1
uint8 ROBOT_MODE_MOVE=2
uint8 ROBOT_MODE_GUIDING=3
uint8 ROBOT_MODE_REFLEX=4
uint8 ROBOT_MODE_USER_STOPPED=5
uint8 ROBOT_MODE_AUTOMATIC_ERROR_RECOVERY=6
uint8 robot_mode

franka_msgs/Errors current_errors
franka_msgs/Errors last_motion_errors

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: franka_msgs/Errors
bool joint_position_limits_violation
bool cartesian_position_limits_violation
bool self_collision_avoidance_violation
bool joint_velocity_violation
bool cartesian_velocity_violation
bool force_control_safety_violation
bool joint_reflex
bool cartesian_reflex
bool max_goal_pose_deviation_violation
bool max_path_pose_deviation_violation
bool cartesian_velocity_profile_safety_violation
bool joint_position_motion_generator_start_pose_invalid
bool joint_motion_generator_position_limits_violation
bool joint_motion_generator_velocity_limits_violation
bool joint_motion_generator_velocity_discontinuity
bool joint_motion_generator_acceleration_discontinuity
bool cartesian_position_motion_generator_start_pose_invalid
bool cartesian_motion_generator_elbow_limit_violation
bool cartesian_motion_generator_velocity_limits_violation
bool cartesian_motion_generator_velocity_discontinuity
bool cartesian_motion_generator_acceleration_discontinuity
bool cartesian_motion_generator_elbow_sign_inconsistent
bool cartesian_motion_generator_start_elbow_invalid
bool cartesian_motion_generator_joint_position_limits_violation
bool cartesian_motion_generator_joint_velocity_limits_violation
bool cartesian_motion_generator_joint_velocity_discontinuity
bool cartesian_motion_generator_joint_acceleration_discontinuity
bool cartesian_position_motion_generator_invalid_frame
bool force_controller_desired_force_tolerance_violation
bool controller_torque_discontinuity
bool start_elbow_sign_inconsistent
bool communication_constraints_violation
bool power_limit_violation
bool joint_p2p_insufficient_torque_for_planning
bool tau_j_range_violation
bool instability_detected
bool joint_move_in_wrong_direction
bool cartesian_spline_motion_generator_violation
bool joint_via_motion_generator_planning_joint_limit_violation
bool base_acceleration_initialization_timeout
bool base_acceleration_invalid_reading
"""
  # Pseudo-constants
  ROBOT_MODE_OTHER = 0
  ROBOT_MODE_IDLE = 1
  ROBOT_MODE_MOVE = 2
  ROBOT_MODE_GUIDING = 3
  ROBOT_MODE_REFLEX = 4
  ROBOT_MODE_USER_STOPPED = 5
  ROBOT_MODE_AUTOMATIC_ERROR_RECOVERY = 6

  __slots__ = ['header','cartesian_collision','cartesian_contact','O_dP_EE','q_d','dq_d','dtau_J','tau_J_d','joint_collision','joint_contact','tau_ext_hat_filtered','F_x_Cee','F_x_Cload','F_x_Ctotal','I_ee','I_load','I_total','m_ee','m_load','m_total','gravity','coriolis','mass_matrix','O_Jac_EE','O_T_EE_d','F_T_EE','F_T_NE','NE_T_EE','EE_T_K','time','robot_mode','current_errors','last_motion_errors']
  _slot_types = ['std_msgs/Header','float64[6]','float64[6]','float64[6]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[7]','float64[3]','float64[3]','float64[3]','float64[9]','float64[9]','float64[9]','float64','float64','float64','float64[7]','float64[7]','float64[49]','float64[42]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64','uint8','franka_msgs/Errors','franka_msgs/Errors']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,cartesian_collision,cartesian_contact,O_dP_EE,q_d,dq_d,dtau_J,tau_J_d,joint_collision,joint_contact,tau_ext_hat_filtered,F_x_Cee,F_x_Cload,F_x_Ctotal,I_ee,I_load,I_total,m_ee,m_load,m_total,gravity,coriolis,mass_matrix,O_Jac_EE,O_T_EE_d,F_T_EE,F_T_NE,NE_T_EE,EE_T_K,time,robot_mode,current_errors,last_motion_errors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cartesian_collision is None:
        self.cartesian_collision = [0.] * 6
      if self.cartesian_contact is None:
        self.cartesian_contact = [0.] * 6
      if self.O_dP_EE is None:
        self.O_dP_EE = [0.] * 6
      if self.q_d is None:
        self.q_d = [0.] * 7
      if self.dq_d is None:
        self.dq_d = [0.] * 7
      if self.dtau_J is None:
        self.dtau_J = [0.] * 7
      if self.tau_J_d is None:
        self.tau_J_d = [0.] * 7
      if self.joint_collision is None:
        self.joint_collision = [0.] * 7
      if self.joint_contact is None:
        self.joint_contact = [0.] * 7
      if self.tau_ext_hat_filtered is None:
        self.tau_ext_hat_filtered = [0.] * 7
      if self.F_x_Cee is None:
        self.F_x_Cee = [0.] * 3
      if self.F_x_Cload is None:
        self.F_x_Cload = [0.] * 3
      if self.F_x_Ctotal is None:
        self.F_x_Ctotal = [0.] * 3
      if self.I_ee is None:
        self.I_ee = [0.] * 9
      if self.I_load is None:
        self.I_load = [0.] * 9
      if self.I_total is None:
        self.I_total = [0.] * 9
      if self.m_ee is None:
        self.m_ee = 0.
      if self.m_load is None:
        self.m_load = 0.
      if self.m_total is None:
        self.m_total = 0.
      if self.gravity is None:
        self.gravity = [0.] * 7
      if self.coriolis is None:
        self.coriolis = [0.] * 7
      if self.mass_matrix is None:
        self.mass_matrix = [0.] * 49
      if self.O_Jac_EE is None:
        self.O_Jac_EE = [0.] * 42
      if self.O_T_EE_d is None:
        self.O_T_EE_d = [0.] * 16
      if self.F_T_EE is None:
        self.F_T_EE = [0.] * 16
      if self.F_T_NE is None:
        self.F_T_NE = [0.] * 16
      if self.NE_T_EE is None:
        self.NE_T_EE = [0.] * 16
      if self.EE_T_K is None:
        self.EE_T_K = [0.] * 16
      if self.time is None:
        self.time = 0.
      if self.robot_mode is None:
        self.robot_mode = 0
      if self.current_errors is None:
        self.current_errors = franka_msgs.msg.Errors()
      if self.last_motion_errors is None:
        self.last_motion_errors = franka_msgs.msg.Errors()
    else:
      self.header = std_msgs.msg.Header()
      self.cartesian_collision = [0.] * 6
      self.cartesian_contact = [0.] * 6
      self.O_dP_EE = [0.] * 6
      self.q_d = [0.] * 7
      self.dq_d = [0.] * 7
      self.dtau_J = [0.] * 7
      self.tau_J_d = [0.] * 7
      self.joint_collision = [0.] * 7
      self.joint_contact = [0.] * 7
      self.tau_ext_hat_filtered = [0.] * 7
      self.F_x_Cee = [0.] * 3
      self.F_x_Cload = [0.] * 3
      self.F_x_Ctotal = [0.] * 3
      self.I_ee = [0.] * 9
      self.I_load = [0.] * 9
      self.I_total = [0.] * 9
      self.m_ee = 0.
      self.m_load = 0.
      self.m_total = 0.
      self.gravity = [0.] * 7
      self.coriolis = [0.] * 7
      self.mass_matrix = [0.] * 49
      self.O_Jac_EE = [0.] * 42
      self.O_T_EE_d = [0.] * 16
      self.F_T_EE = [0.] * 16
      self.F_T_NE = [0.] * 16
      self.NE_T_EE = [0.] * 16
      self.EE_T_K = [0.] * 16
      self.time = 0.
      self.robot_mode = 0
      self.current_errors = franka_msgs.msg.Errors()
      self.last_motion_errors = franka_msgs.msg.Errors()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_6d().pack(*self.cartesian_collision))
      buff.write(_get_struct_6d().pack(*self.cartesian_contact))
      buff.write(_get_struct_6d().pack(*self.O_dP_EE))
      buff.write(_get_struct_7d().pack(*self.q_d))
      buff.write(_get_struct_7d().pack(*self.dq_d))
      buff.write(_get_struct_7d().pack(*self.dtau_J))
      buff.write(_get_struct_7d().pack(*self.tau_J_d))
      buff.write(_get_struct_7d().pack(*self.joint_collision))
      buff.write(_get_struct_7d().pack(*self.joint_contact))
      buff.write(_get_struct_7d().pack(*self.tau_ext_hat_filtered))
      buff.write(_get_struct_3d().pack(*self.F_x_Cee))
      buff.write(_get_struct_3d().pack(*self.F_x_Cload))
      buff.write(_get_struct_3d().pack(*self.F_x_Ctotal))
      buff.write(_get_struct_9d().pack(*self.I_ee))
      buff.write(_get_struct_9d().pack(*self.I_load))
      buff.write(_get_struct_9d().pack(*self.I_total))
      _x = self
      buff.write(_get_struct_3d().pack(_x.m_ee, _x.m_load, _x.m_total))
      buff.write(_get_struct_7d().pack(*self.gravity))
      buff.write(_get_struct_7d().pack(*self.coriolis))
      buff.write(_get_struct_49d().pack(*self.mass_matrix))
      buff.write(_get_struct_42d().pack(*self.O_Jac_EE))
      buff.write(_get_struct_16d().pack(*self.O_T_EE_d))
      buff.write(_get_struct_16d().pack(*self.F_T_EE))
      buff.write(_get_struct_16d().pack(*self.F_T_NE))
      buff.write(_get_struct_16d().pack(*self.NE_T_EE))
      buff.write(_get_struct_16d().pack(*self.EE_T_K))
      _x = self
      buff.write(_get_struct_d83B().pack(_x.time, _x.robot_mode, _x.current_errors.joint_position_limits_violation, _x.current_errors.cartesian_position_limits_violation, _x.current_errors.self_collision_avoidance_violation, _x.current_errors.joint_velocity_violation, _x.current_errors.cartesian_velocity_violation, _x.current_errors.force_control_safety_violation, _x.current_errors.joint_reflex, _x.current_errors.cartesian_reflex, _x.current_errors.max_goal_pose_deviation_violation, _x.current_errors.max_path_pose_deviation_violation, _x.current_errors.cartesian_velocity_profile_safety_violation, _x.current_errors.joint_position_motion_generator_start_pose_invalid, _x.current_errors.joint_motion_generator_position_limits_violation, _x.current_errors.joint_motion_generator_velocity_limits_violation, _x.current_errors.joint_motion_generator_velocity_discontinuity, _x.current_errors.joint_motion_generator_acceleration_discontinuity, _x.current_errors.cartesian_position_motion_generator_start_pose_invalid, _x.current_errors.cartesian_motion_generator_elbow_limit_violation, _x.current_errors.cartesian_motion_generator_velocity_limits_violation, _x.current_errors.cartesian_motion_generator_velocity_discontinuity, _x.current_errors.cartesian_motion_generator_acceleration_discontinuity, _x.current_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.current_errors.cartesian_motion_generator_start_elbow_invalid, _x.current_errors.cartesian_motion_generator_joint_position_limits_violation, _x.current_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.current_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.current_errors.cartesian_position_motion_generator_invalid_frame, _x.current_errors.force_controller_desired_force_tolerance_violation, _x.current_errors.controller_torque_discontinuity, _x.current_errors.start_elbow_sign_inconsistent, _x.current_errors.communication_constraints_violation, _x.current_errors.power_limit_violation, _x.current_errors.joint_p2p_insufficient_torque_for_planning, _x.current_errors.tau_j_range_violation, _x.current_errors.instability_detected, _x.current_errors.joint_move_in_wrong_direction, _x.current_errors.cartesian_spline_motion_generator_violation, _x.current_errors.joint_via_motion_generator_planning_joint_limit_violation, _x.current_errors.base_acceleration_initialization_timeout, _x.current_errors.base_acceleration_invalid_reading, _x.last_motion_errors.joint_position_limits_violation, _x.last_motion_errors.cartesian_position_limits_violation, _x.last_motion_errors.self_collision_avoidance_violation, _x.last_motion_errors.joint_velocity_violation, _x.last_motion_errors.cartesian_velocity_violation, _x.last_motion_errors.force_control_safety_violation, _x.last_motion_errors.joint_reflex, _x.last_motion_errors.cartesian_reflex, _x.last_motion_errors.max_goal_pose_deviation_violation, _x.last_motion_errors.max_path_pose_deviation_violation, _x.last_motion_errors.cartesian_velocity_profile_safety_violation, _x.last_motion_errors.joint_position_motion_generator_start_pose_invalid, _x.last_motion_errors.joint_motion_generator_position_limits_violation, _x.last_motion_errors.joint_motion_generator_velocity_limits_violation, _x.last_motion_errors.joint_motion_generator_velocity_discontinuity, _x.last_motion_errors.joint_motion_generator_acceleration_discontinuity, _x.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid, _x.last_motion_errors.cartesian_motion_generator_elbow_limit_violation, _x.last_motion_errors.cartesian_motion_generator_velocity_limits_violation, _x.last_motion_errors.cartesian_motion_generator_velocity_discontinuity, _x.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity, _x.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.last_motion_errors.cartesian_motion_generator_start_elbow_invalid, _x.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation, _x.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.last_motion_errors.cartesian_position_motion_generator_invalid_frame, _x.last_motion_errors.force_controller_desired_force_tolerance_violation, _x.last_motion_errors.controller_torque_discontinuity, _x.last_motion_errors.start_elbow_sign_inconsistent, _x.last_motion_errors.communication_constraints_violation, _x.last_motion_errors.power_limit_violation, _x.last_motion_errors.joint_p2p_insufficient_torque_for_planning, _x.last_motion_errors.tau_j_range_violation, _x.last_motion_errors.instability_detected, _x.last_motion_errors.joint_move_in_wrong_direction, _x.last_motion_errors.cartesian_spline_motion_generator_violation, _x.last_motion_errors.joint_via_motion_generator_planning_joint_limit_violation, _x.last_motion_errors.base_acceleration_initialization_timeout, _x.last_motion_errors.base_acceleration_invalid_reading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.current_errors is None:
        self.current_errors = franka_msgs.msg.Errors()
      if self.last_motion_errors is None:
        self.last_motion_errors = franka_msgs.msg.Errors()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 48
      self.cartesian_collision = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.cartesian_contact = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.O_dP_EE = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 56
      self.q_d = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.dq_d = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.dtau_J = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.tau_J_d = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_collision = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_contact = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.tau_ext_hat_filtered = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 24
      self.F_x_Cee = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.F_x_Cload = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.F_x_Ctotal = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.I_ee = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.I_load = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.I_total = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.m_ee, _x.m_load, _x.m_total,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 56
      self.gravity = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 56
      self.coriolis = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 392
      self.mass_matrix = _get_struct_49d().unpack(str[start:end])
      start = end
      end += 336
      self.O_Jac_EE = _get_struct_42d().unpack(str[start:end])
      start = end
      end += 128
      self.O_T_EE_d = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.F_T_EE = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.F_T_NE = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.NE_T_EE = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.EE_T_K = _get_struct_16d().unpack(str[start:end])
      _x = self
      start = end
      end += 91
      (_x.time, _x.robot_mode, _x.current_errors.joint_position_limits_violation, _x.current_errors.cartesian_position_limits_violation, _x.current_errors.self_collision_avoidance_violation, _x.current_errors.joint_velocity_violation, _x.current_errors.cartesian_velocity_violation, _x.current_errors.force_control_safety_violation, _x.current_errors.joint_reflex, _x.current_errors.cartesian_reflex, _x.current_errors.max_goal_pose_deviation_violation, _x.current_errors.max_path_pose_deviation_violation, _x.current_errors.cartesian_velocity_profile_safety_violation, _x.current_errors.joint_position_motion_generator_start_pose_invalid, _x.current_errors.joint_motion_generator_position_limits_violation, _x.current_errors.joint_motion_generator_velocity_limits_violation, _x.current_errors.joint_motion_generator_velocity_discontinuity, _x.current_errors.joint_motion_generator_acceleration_discontinuity, _x.current_errors.cartesian_position_motion_generator_start_pose_invalid, _x.current_errors.cartesian_motion_generator_elbow_limit_violation, _x.current_errors.cartesian_motion_generator_velocity_limits_violation, _x.current_errors.cartesian_motion_generator_velocity_discontinuity, _x.current_errors.cartesian_motion_generator_acceleration_discontinuity, _x.current_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.current_errors.cartesian_motion_generator_start_elbow_invalid, _x.current_errors.cartesian_motion_generator_joint_position_limits_violation, _x.current_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.current_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.current_errors.cartesian_position_motion_generator_invalid_frame, _x.current_errors.force_controller_desired_force_tolerance_violation, _x.current_errors.controller_torque_discontinuity, _x.current_errors.start_elbow_sign_inconsistent, _x.current_errors.communication_constraints_violation, _x.current_errors.power_limit_violation, _x.current_errors.joint_p2p_insufficient_torque_for_planning, _x.current_errors.tau_j_range_violation, _x.current_errors.instability_detected, _x.current_errors.joint_move_in_wrong_direction, _x.current_errors.cartesian_spline_motion_generator_violation, _x.current_errors.joint_via_motion_generator_planning_joint_limit_violation, _x.current_errors.base_acceleration_initialization_timeout, _x.current_errors.base_acceleration_invalid_reading, _x.last_motion_errors.joint_position_limits_violation, _x.last_motion_errors.cartesian_position_limits_violation, _x.last_motion_errors.self_collision_avoidance_violation, _x.last_motion_errors.joint_velocity_violation, _x.last_motion_errors.cartesian_velocity_violation, _x.last_motion_errors.force_control_safety_violation, _x.last_motion_errors.joint_reflex, _x.last_motion_errors.cartesian_reflex, _x.last_motion_errors.max_goal_pose_deviation_violation, _x.last_motion_errors.max_path_pose_deviation_violation, _x.last_motion_errors.cartesian_velocity_profile_safety_violation, _x.last_motion_errors.joint_position_motion_generator_start_pose_invalid, _x.last_motion_errors.joint_motion_generator_position_limits_violation, _x.last_motion_errors.joint_motion_generator_velocity_limits_violation, _x.last_motion_errors.joint_motion_generator_velocity_discontinuity, _x.last_motion_errors.joint_motion_generator_acceleration_discontinuity, _x.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid, _x.last_motion_errors.cartesian_motion_generator_elbow_limit_violation, _x.last_motion_errors.cartesian_motion_generator_velocity_limits_violation, _x.last_motion_errors.cartesian_motion_generator_velocity_discontinuity, _x.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity, _x.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.last_motion_errors.cartesian_motion_generator_start_elbow_invalid, _x.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation, _x.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.last_motion_errors.cartesian_position_motion_generator_invalid_frame, _x.last_motion_errors.force_controller_desired_force_tolerance_violation, _x.last_motion_errors.controller_torque_discontinuity, _x.last_motion_errors.start_elbow_sign_inconsistent, _x.last_motion_errors.communication_constraints_violation, _x.last_motion_errors.power_limit_violation, _x.last_motion_errors.joint_p2p_insufficient_torque_for_planning, _x.last_motion_errors.tau_j_range_violation, _x.last_motion_errors.instability_detected, _x.last_motion_errors.joint_move_in_wrong_direction, _x.last_motion_errors.cartesian_spline_motion_generator_violation, _x.last_motion_errors.joint_via_motion_generator_planning_joint_limit_violation, _x.last_motion_errors.base_acceleration_initialization_timeout, _x.last_motion_errors.base_acceleration_invalid_reading,) = _get_struct_d83B().unpack(str[start:end])
      self.current_errors.joint_position_limits_violation = bool(self.current_errors.joint_position_limits_violation)
      self.current_errors.cartesian_position_limits_violation = bool(self.current_errors.cartesian_position_limits_violation)
      self.current_errors.self_collision_avoidance_violation = bool(self.current_errors.self_collision_avoidance_violation)
      self.current_errors.joint_velocity_violation = bool(self.current_errors.joint_velocity_violation)
      self.current_errors.cartesian_velocity_violation = bool(self.current_errors.cartesian_velocity_violation)
      self.current_errors.force_control_safety_violation = bool(self.current_errors.force_control_safety_violation)
      self.current_errors.joint_reflex = bool(self.current_errors.joint_reflex)
      self.current_errors.cartesian_reflex = bool(self.current_errors.cartesian_reflex)
      self.current_errors.max_goal_pose_deviation_violation = bool(self.current_errors.max_goal_pose_deviation_violation)
      self.current_errors.max_path_pose_deviation_violation = bool(self.current_errors.max_path_pose_deviation_violation)
      self.current_errors.cartesian_velocity_profile_safety_violation = bool(self.current_errors.cartesian_velocity_profile_safety_violation)
      self.current_errors.joint_position_motion_generator_start_pose_invalid = bool(self.current_errors.joint_position_motion_generator_start_pose_invalid)
      self.current_errors.joint_motion_generator_position_limits_violation = bool(self.current_errors.joint_motion_generator_position_limits_violation)
      self.current_errors.joint_motion_generator_velocity_limits_violation = bool(self.current_errors.joint_motion_generator_velocity_limits_violation)
      self.current_errors.joint_motion_generator_velocity_discontinuity = bool(self.current_errors.joint_motion_generator_velocity_discontinuity)
      self.current_errors.joint_motion_generator_acceleration_discontinuity = bool(self.current_errors.joint_motion_generator_acceleration_discontinuity)
      self.current_errors.cartesian_position_motion_generator_start_pose_invalid = bool(self.current_errors.cartesian_position_motion_generator_start_pose_invalid)
      self.current_errors.cartesian_motion_generator_elbow_limit_violation = bool(self.current_errors.cartesian_motion_generator_elbow_limit_violation)
      self.current_errors.cartesian_motion_generator_velocity_limits_violation = bool(self.current_errors.cartesian_motion_generator_velocity_limits_violation)
      self.current_errors.cartesian_motion_generator_velocity_discontinuity = bool(self.current_errors.cartesian_motion_generator_velocity_discontinuity)
      self.current_errors.cartesian_motion_generator_acceleration_discontinuity = bool(self.current_errors.cartesian_motion_generator_acceleration_discontinuity)
      self.current_errors.cartesian_motion_generator_elbow_sign_inconsistent = bool(self.current_errors.cartesian_motion_generator_elbow_sign_inconsistent)
      self.current_errors.cartesian_motion_generator_start_elbow_invalid = bool(self.current_errors.cartesian_motion_generator_start_elbow_invalid)
      self.current_errors.cartesian_motion_generator_joint_position_limits_violation = bool(self.current_errors.cartesian_motion_generator_joint_position_limits_violation)
      self.current_errors.cartesian_motion_generator_joint_velocity_limits_violation = bool(self.current_errors.cartesian_motion_generator_joint_velocity_limits_violation)
      self.current_errors.cartesian_motion_generator_joint_velocity_discontinuity = bool(self.current_errors.cartesian_motion_generator_joint_velocity_discontinuity)
      self.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity = bool(self.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity)
      self.current_errors.cartesian_position_motion_generator_invalid_frame = bool(self.current_errors.cartesian_position_motion_generator_invalid_frame)
      self.current_errors.force_controller_desired_force_tolerance_violation = bool(self.current_errors.force_controller_desired_force_tolerance_violation)
      self.current_errors.controller_torque_discontinuity = bool(self.current_errors.controller_torque_discontinuity)
      self.current_errors.start_elbow_sign_inconsistent = bool(self.current_errors.start_elbow_sign_inconsistent)
      self.current_errors.communication_constraints_violation = bool(self.current_errors.communication_constraints_violation)
      self.current_errors.power_limit_violation = bool(self.current_errors.power_limit_violation)
      self.current_errors.joint_p2p_insufficient_torque_for_planning = bool(self.current_errors.joint_p2p_insufficient_torque_for_planning)
      self.current_errors.tau_j_range_violation = bool(self.current_errors.tau_j_range_violation)
      self.current_errors.instability_detected = bool(self.current_errors.instability_detected)
      self.current_errors.joint_move_in_wrong_direction = bool(self.current_errors.joint_move_in_wrong_direction)
      self.current_errors.cartesian_spline_motion_generator_violation = bool(self.current_errors.cartesian_spline_motion_generator_violation)
      self.current_errors.joint_via_motion_generator_planning_joint_limit_violation = bool(self.current_errors.joint_via_motion_generator_planning_joint_limit_violation)
      self.current_errors.base_acceleration_initialization_timeout = bool(self.current_errors.base_acceleration_initialization_timeout)
      self.current_errors.base_acceleration_invalid_reading = bool(self.current_errors.base_acceleration_invalid_reading)
      self.last_motion_errors.joint_position_limits_violation = bool(self.last_motion_errors.joint_position_limits_violation)
      self.last_motion_errors.cartesian_position_limits_violation = bool(self.last_motion_errors.cartesian_position_limits_violation)
      self.last_motion_errors.self_collision_avoidance_violation = bool(self.last_motion_errors.self_collision_avoidance_violation)
      self.last_motion_errors.joint_velocity_violation = bool(self.last_motion_errors.joint_velocity_violation)
      self.last_motion_errors.cartesian_velocity_violation = bool(self.last_motion_errors.cartesian_velocity_violation)
      self.last_motion_errors.force_control_safety_violation = bool(self.last_motion_errors.force_control_safety_violation)
      self.last_motion_errors.joint_reflex = bool(self.last_motion_errors.joint_reflex)
      self.last_motion_errors.cartesian_reflex = bool(self.last_motion_errors.cartesian_reflex)
      self.last_motion_errors.max_goal_pose_deviation_violation = bool(self.last_motion_errors.max_goal_pose_deviation_violation)
      self.last_motion_errors.max_path_pose_deviation_violation = bool(self.last_motion_errors.max_path_pose_deviation_violation)
      self.last_motion_errors.cartesian_velocity_profile_safety_violation = bool(self.last_motion_errors.cartesian_velocity_profile_safety_violation)
      self.last_motion_errors.joint_position_motion_generator_start_pose_invalid = bool(self.last_motion_errors.joint_position_motion_generator_start_pose_invalid)
      self.last_motion_errors.joint_motion_generator_position_limits_violation = bool(self.last_motion_errors.joint_motion_generator_position_limits_violation)
      self.last_motion_errors.joint_motion_generator_velocity_limits_violation = bool(self.last_motion_errors.joint_motion_generator_velocity_limits_violation)
      self.last_motion_errors.joint_motion_generator_velocity_discontinuity = bool(self.last_motion_errors.joint_motion_generator_velocity_discontinuity)
      self.last_motion_errors.joint_motion_generator_acceleration_discontinuity = bool(self.last_motion_errors.joint_motion_generator_acceleration_discontinuity)
      self.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid = bool(self.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid)
      self.last_motion_errors.cartesian_motion_generator_elbow_limit_violation = bool(self.last_motion_errors.cartesian_motion_generator_elbow_limit_violation)
      self.last_motion_errors.cartesian_motion_generator_velocity_limits_violation = bool(self.last_motion_errors.cartesian_motion_generator_velocity_limits_violation)
      self.last_motion_errors.cartesian_motion_generator_velocity_discontinuity = bool(self.last_motion_errors.cartesian_motion_generator_velocity_discontinuity)
      self.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity = bool(self.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity)
      self.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent = bool(self.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent)
      self.last_motion_errors.cartesian_motion_generator_start_elbow_invalid = bool(self.last_motion_errors.cartesian_motion_generator_start_elbow_invalid)
      self.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation = bool(self.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation)
      self.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation = bool(self.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation)
      self.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity = bool(self.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity)
      self.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity = bool(self.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity)
      self.last_motion_errors.cartesian_position_motion_generator_invalid_frame = bool(self.last_motion_errors.cartesian_position_motion_generator_invalid_frame)
      self.last_motion_errors.force_controller_desired_force_tolerance_violation = bool(self.last_motion_errors.force_controller_desired_force_tolerance_violation)
      self.last_motion_errors.controller_torque_discontinuity = bool(self.last_motion_errors.controller_torque_discontinuity)
      self.last_motion_errors.start_elbow_sign_inconsistent = bool(self.last_motion_errors.start_elbow_sign_inconsistent)
      self.last_motion_errors.communication_constraints_violation = bool(self.last_motion_errors.communication_constraints_violation)
      self.last_motion_errors.power_limit_violation = bool(self.last_motion_errors.power_limit_violation)
      self.last_motion_errors.joint_p2p_insufficient_torque_for_planning = bool(self.last_motion_errors.joint_p2p_insufficient_torque_for_planning)
      self.last_motion_errors.tau_j_range_violation = bool(self.last_motion_errors.tau_j_range_violation)
      self.last_motion_errors.instability_detected = bool(self.last_motion_errors.instability_detected)
      self.last_motion_errors.joint_move_in_wrong_direction = bool(self.last_motion_errors.joint_move_in_wrong_direction)
      self.last_motion_errors.cartesian_spline_motion_generator_violation = bool(self.last_motion_errors.cartesian_spline_motion_generator_violation)
      self.last_motion_errors.joint_via_motion_generator_planning_joint_limit_violation = bool(self.last_motion_errors.joint_via_motion_generator_planning_joint_limit_violation)
      self.last_motion_errors.base_acceleration_initialization_timeout = bool(self.last_motion_errors.base_acceleration_initialization_timeout)
      self.last_motion_errors.base_acceleration_invalid_reading = bool(self.last_motion_errors.base_acceleration_invalid_reading)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.cartesian_collision.tostring())
      buff.write(self.cartesian_contact.tostring())
      buff.write(self.O_dP_EE.tostring())
      buff.write(self.q_d.tostring())
      buff.write(self.dq_d.tostring())
      buff.write(self.dtau_J.tostring())
      buff.write(self.tau_J_d.tostring())
      buff.write(self.joint_collision.tostring())
      buff.write(self.joint_contact.tostring())
      buff.write(self.tau_ext_hat_filtered.tostring())
      buff.write(self.F_x_Cee.tostring())
      buff.write(self.F_x_Cload.tostring())
      buff.write(self.F_x_Ctotal.tostring())
      buff.write(self.I_ee.tostring())
      buff.write(self.I_load.tostring())
      buff.write(self.I_total.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.m_ee, _x.m_load, _x.m_total))
      buff.write(self.gravity.tostring())
      buff.write(self.coriolis.tostring())
      buff.write(self.mass_matrix.tostring())
      buff.write(self.O_Jac_EE.tostring())
      buff.write(self.O_T_EE_d.tostring())
      buff.write(self.F_T_EE.tostring())
      buff.write(self.F_T_NE.tostring())
      buff.write(self.NE_T_EE.tostring())
      buff.write(self.EE_T_K.tostring())
      _x = self
      buff.write(_get_struct_d83B().pack(_x.time, _x.robot_mode, _x.current_errors.joint_position_limits_violation, _x.current_errors.cartesian_position_limits_violation, _x.current_errors.self_collision_avoidance_violation, _x.current_errors.joint_velocity_violation, _x.current_errors.cartesian_velocity_violation, _x.current_errors.force_control_safety_violation, _x.current_errors.joint_reflex, _x.current_errors.cartesian_reflex, _x.current_errors.max_goal_pose_deviation_violation, _x.current_errors.max_path_pose_deviation_violation, _x.current_errors.cartesian_velocity_profile_safety_violation, _x.current_errors.joint_position_motion_generator_start_pose_invalid, _x.current_errors.joint_motion_generator_position_limits_violation, _x.current_errors.joint_motion_generator_velocity_limits_violation, _x.current_errors.joint_motion_generator_velocity_discontinuity, _x.current_errors.joint_motion_generator_acceleration_discontinuity, _x.current_errors.cartesian_position_motion_generator_start_pose_invalid, _x.current_errors.cartesian_motion_generator_elbow_limit_violation, _x.current_errors.cartesian_motion_generator_velocity_limits_violation, _x.current_errors.cartesian_motion_generator_velocity_discontinuity, _x.current_errors.cartesian_motion_generator_acceleration_discontinuity, _x.current_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.current_errors.cartesian_motion_generator_start_elbow_invalid, _x.current_errors.cartesian_motion_generator_joint_position_limits_violation, _x.current_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.current_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.current_errors.cartesian_position_motion_generator_invalid_frame, _x.current_errors.force_controller_desired_force_tolerance_violation, _x.current_errors.controller_torque_discontinuity, _x.current_errors.start_elbow_sign_inconsistent, _x.current_errors.communication_constraints_violation, _x.current_errors.power_limit_violation, _x.current_errors.joint_p2p_insufficient_torque_for_planning, _x.current_errors.tau_j_range_violation, _x.current_errors.instability_detected, _x.current_errors.joint_move_in_wrong_direction, _x.current_errors.cartesian_spline_motion_generator_violation, _x.current_errors.joint_via_motion_generator_planning_joint_limit_violation, _x.current_errors.base_acceleration_initialization_timeout, _x.current_errors.base_acceleration_invalid_reading, _x.last_motion_errors.joint_position_limits_violation, _x.last_motion_errors.cartesian_position_limits_violation, _x.last_motion_errors.self_collision_avoidance_violation, _x.last_motion_errors.joint_velocity_violation, _x.last_motion_errors.cartesian_velocity_violation, _x.last_motion_errors.force_control_safety_violation, _x.last_motion_errors.joint_reflex, _x.last_motion_errors.cartesian_reflex, _x.last_motion_errors.max_goal_pose_deviation_violation, _x.last_motion_errors.max_path_pose_deviation_violation, _x.last_motion_errors.cartesian_velocity_profile_safety_violation, _x.last_motion_errors.joint_position_motion_generator_start_pose_invalid, _x.last_motion_errors.joint_motion_generator_position_limits_violation, _x.last_motion_errors.joint_motion_generator_velocity_limits_violation, _x.last_motion_errors.joint_motion_generator_velocity_discontinuity, _x.last_motion_errors.joint_motion_generator_acceleration_discontinuity, _x.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid, _x.last_motion_errors.cartesian_motion_generator_elbow_limit_violation, _x.last_motion_errors.cartesian_motion_generator_velocity_limits_violation, _x.last_motion_errors.cartesian_motion_generator_velocity_discontinuity, _x.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity, _x.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.last_motion_errors.cartesian_motion_generator_start_elbow_invalid, _x.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation, _x.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.last_motion_errors.cartesian_position_motion_generator_invalid_frame, _x.last_motion_errors.force_controller_desired_force_tolerance_violation, _x.last_motion_errors.controller_torque_discontinuity, _x.last_motion_errors.start_elbow_sign_inconsistent, _x.last_motion_errors.communication_constraints_violation, _x.last_motion_errors.power_limit_violation, _x.last_motion_errors.joint_p2p_insufficient_torque_for_planning, _x.last_motion_errors.tau_j_range_violation, _x.last_motion_errors.instability_detected, _x.last_motion_errors.joint_move_in_wrong_direction, _x.last_motion_errors.cartesian_spline_motion_generator_violation, _x.last_motion_errors.joint_via_motion_generator_planning_joint_limit_violation, _x.last_motion_errors.base_acceleration_initialization_timeout, _x.last_motion_errors.base_acceleration_invalid_reading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.current_errors is None:
        self.current_errors = franka_msgs.msg.Errors()
      if self.last_motion_errors is None:
        self.last_motion_errors = franka_msgs.msg.Errors()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 48
      self.cartesian_collision = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.cartesian_contact = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.O_dP_EE = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 56
      self.q_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.dq_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.dtau_J = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.tau_J_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.joint_collision = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.joint_contact = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.tau_ext_hat_filtered = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 24
      self.F_x_Cee = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.F_x_Cload = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.F_x_Ctotal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 72
      self.I_ee = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.I_load = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.I_total = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.m_ee, _x.m_load, _x.m_total,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 56
      self.gravity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 56
      self.coriolis = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 392
      self.mass_matrix = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=49)
      start = end
      end += 336
      self.O_Jac_EE = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=42)
      start = end
      end += 128
      self.O_T_EE_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.F_T_EE = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.F_T_NE = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.NE_T_EE = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.EE_T_K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      _x = self
      start = end
      end += 91
      (_x.time, _x.robot_mode, _x.current_errors.joint_position_limits_violation, _x.current_errors.cartesian_position_limits_violation, _x.current_errors.self_collision_avoidance_violation, _x.current_errors.joint_velocity_violation, _x.current_errors.cartesian_velocity_violation, _x.current_errors.force_control_safety_violation, _x.current_errors.joint_reflex, _x.current_errors.cartesian_reflex, _x.current_errors.max_goal_pose_deviation_violation, _x.current_errors.max_path_pose_deviation_violation, _x.current_errors.cartesian_velocity_profile_safety_violation, _x.current_errors.joint_position_motion_generator_start_pose_invalid, _x.current_errors.joint_motion_generator_position_limits_violation, _x.current_errors.joint_motion_generator_velocity_limits_violation, _x.current_errors.joint_motion_generator_velocity_discontinuity, _x.current_errors.joint_motion_generator_acceleration_discontinuity, _x.current_errors.cartesian_position_motion_generator_start_pose_invalid, _x.current_errors.cartesian_motion_generator_elbow_limit_violation, _x.current_errors.cartesian_motion_generator_velocity_limits_violation, _x.current_errors.cartesian_motion_generator_velocity_discontinuity, _x.current_errors.cartesian_motion_generator_acceleration_discontinuity, _x.current_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.current_errors.cartesian_motion_generator_start_elbow_invalid, _x.current_errors.cartesian_motion_generator_joint_position_limits_violation, _x.current_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.current_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.current_errors.cartesian_position_motion_generator_invalid_frame, _x.current_errors.force_controller_desired_force_tolerance_violation, _x.current_errors.controller_torque_discontinuity, _x.current_errors.start_elbow_sign_inconsistent, _x.current_errors.communication_constraints_violation, _x.current_errors.power_limit_violation, _x.current_errors.joint_p2p_insufficient_torque_for_planning, _x.current_errors.tau_j_range_violation, _x.current_errors.instability_detected, _x.current_errors.joint_move_in_wrong_direction, _x.current_errors.cartesian_spline_motion_generator_violation, _x.current_errors.joint_via_motion_generator_planning_joint_limit_violation, _x.current_errors.base_acceleration_initialization_timeout, _x.current_errors.base_acceleration_invalid_reading, _x.last_motion_errors.joint_position_limits_violation, _x.last_motion_errors.cartesian_position_limits_violation, _x.last_motion_errors.self_collision_avoidance_violation, _x.last_motion_errors.joint_velocity_violation, _x.last_motion_errors.cartesian_velocity_violation, _x.last_motion_errors.force_control_safety_violation, _x.last_motion_errors.joint_reflex, _x.last_motion_errors.cartesian_reflex, _x.last_motion_errors.max_goal_pose_deviation_violation, _x.last_motion_errors.max_path_pose_deviation_violation, _x.last_motion_errors.cartesian_velocity_profile_safety_violation, _x.last_motion_errors.joint_position_motion_generator_start_pose_invalid, _x.last_motion_errors.joint_motion_generator_position_limits_violation, _x.last_motion_errors.joint_motion_generator_velocity_limits_violation, _x.last_motion_errors.joint_motion_generator_velocity_discontinuity, _x.last_motion_errors.joint_motion_generator_acceleration_discontinuity, _x.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid, _x.last_motion_errors.cartesian_motion_generator_elbow_limit_violation, _x.last_motion_errors.cartesian_motion_generator_velocity_limits_violation, _x.last_motion_errors.cartesian_motion_generator_velocity_discontinuity, _x.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity, _x.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent, _x.last_motion_errors.cartesian_motion_generator_start_elbow_invalid, _x.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation, _x.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation, _x.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity, _x.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity, _x.last_motion_errors.cartesian_position_motion_generator_invalid_frame, _x.last_motion_errors.force_controller_desired_force_tolerance_violation, _x.last_motion_errors.controller_torque_discontinuity, _x.last_motion_errors.start_elbow_sign_inconsistent, _x.last_motion_errors.communication_constraints_violation, _x.last_motion_errors.power_limit_violation, _x.last_motion_errors.joint_p2p_insufficient_torque_for_planning, _x.last_motion_errors.tau_j_range_violation, _x.last_motion_errors.instability_detected, _x.last_motion_errors.joint_move_in_wrong_direction, _x.last_motion_errors.cartesian_spline_motion_generator_violation, _x.last_motion_errors.joint_via_motion_generator_planning_joint_limit_violation, _x.last_motion_errors.base_acceleration_initialization_timeout, _x.last_motion_errors.base_acceleration_invalid_reading,) = _get_struct_d83B().unpack(str[start:end])
      self.current_errors.joint_position_limits_violation = bool(self.current_errors.joint_position_limits_violation)
      self.current_errors.cartesian_position_limits_violation = bool(self.current_errors.cartesian_position_limits_violation)
      self.current_errors.self_collision_avoidance_violation = bool(self.current_errors.self_collision_avoidance_violation)
      self.current_errors.joint_velocity_violation = bool(self.current_errors.joint_velocity_violation)
      self.current_errors.cartesian_velocity_violation = bool(self.current_errors.cartesian_velocity_violation)
      self.current_errors.force_control_safety_violation = bool(self.current_errors.force_control_safety_violation)
      self.current_errors.joint_reflex = bool(self.current_errors.joint_reflex)
      self.current_errors.cartesian_reflex = bool(self.current_errors.cartesian_reflex)
      self.current_errors.max_goal_pose_deviation_violation = bool(self.current_errors.max_goal_pose_deviation_violation)
      self.current_errors.max_path_pose_deviation_violation = bool(self.current_errors.max_path_pose_deviation_violation)
      self.current_errors.cartesian_velocity_profile_safety_violation = bool(self.current_errors.cartesian_velocity_profile_safety_violation)
      self.current_errors.joint_position_motion_generator_start_pose_invalid = bool(self.current_errors.joint_position_motion_generator_start_pose_invalid)
      self.current_errors.joint_motion_generator_position_limits_violation = bool(self.current_errors.joint_motion_generator_position_limits_violation)
      self.current_errors.joint_motion_generator_velocity_limits_violation = bool(self.current_errors.joint_motion_generator_velocity_limits_violation)
      self.current_errors.joint_motion_generator_velocity_discontinuity = bool(self.current_errors.joint_motion_generator_velocity_discontinuity)
      self.current_errors.joint_motion_generator_acceleration_discontinuity = bool(self.current_errors.joint_motion_generator_acceleration_discontinuity)
      self.current_errors.cartesian_position_motion_generator_start_pose_invalid = bool(self.current_errors.cartesian_position_motion_generator_start_pose_invalid)
      self.current_errors.cartesian_motion_generator_elbow_limit_violation = bool(self.current_errors.cartesian_motion_generator_elbow_limit_violation)
      self.current_errors.cartesian_motion_generator_velocity_limits_violation = bool(self.current_errors.cartesian_motion_generator_velocity_limits_violation)
      self.current_errors.cartesian_motion_generator_velocity_discontinuity = bool(self.current_errors.cartesian_motion_generator_velocity_discontinuity)
      self.current_errors.cartesian_motion_generator_acceleration_discontinuity = bool(self.current_errors.cartesian_motion_generator_acceleration_discontinuity)
      self.current_errors.cartesian_motion_generator_elbow_sign_inconsistent = bool(self.current_errors.cartesian_motion_generator_elbow_sign_inconsistent)
      self.current_errors.cartesian_motion_generator_start_elbow_invalid = bool(self.current_errors.cartesian_motion_generator_start_elbow_invalid)
      self.current_errors.cartesian_motion_generator_joint_position_limits_violation = bool(self.current_errors.cartesian_motion_generator_joint_position_limits_violation)
      self.current_errors.cartesian_motion_generator_joint_velocity_limits_violation = bool(self.current_errors.cartesian_motion_generator_joint_velocity_limits_violation)
      self.current_errors.cartesian_motion_generator_joint_velocity_discontinuity = bool(self.current_errors.cartesian_motion_generator_joint_velocity_discontinuity)
      self.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity = bool(self.current_errors.cartesian_motion_generator_joint_acceleration_discontinuity)
      self.current_errors.cartesian_position_motion_generator_invalid_frame = bool(self.current_errors.cartesian_position_motion_generator_invalid_frame)
      self.current_errors.force_controller_desired_force_tolerance_violation = bool(self.current_errors.force_controller_desired_force_tolerance_violation)
      self.current_errors.controller_torque_discontinuity = bool(self.current_errors.controller_torque_discontinuity)
      self.current_errors.start_elbow_sign_inconsistent = bool(self.current_errors.start_elbow_sign_inconsistent)
      self.current_errors.communication_constraints_violation = bool(self.current_errors.communication_constraints_violation)
      self.current_errors.power_limit_violation = bool(self.current_errors.power_limit_violation)
      self.current_errors.joint_p2p_insufficient_torque_for_planning = bool(self.current_errors.joint_p2p_insufficient_torque_for_planning)
      self.current_errors.tau_j_range_violation = bool(self.current_errors.tau_j_range_violation)
      self.current_errors.instability_detected = bool(self.current_errors.instability_detected)
      self.current_errors.joint_move_in_wrong_direction = bool(self.current_errors.joint_move_in_wrong_direction)
      self.current_errors.cartesian_spline_motion_generator_violation = bool(self.current_errors.cartesian_spline_motion_generator_violation)
      self.current_errors.joint_via_motion_generator_planning_joint_limit_violation = bool(self.current_errors.joint_via_motion_generator_planning_joint_limit_violation)
      self.current_errors.base_acceleration_initialization_timeout = bool(self.current_errors.base_acceleration_initialization_timeout)
      self.current_errors.base_acceleration_invalid_reading = bool(self.current_errors.base_acceleration_invalid_reading)
      self.last_motion_errors.joint_position_limits_violation = bool(self.last_motion_errors.joint_position_limits_violation)
      self.last_motion_errors.cartesian_position_limits_violation = bool(self.last_motion_errors.cartesian_position_limits_violation)
      self.last_motion_errors.self_collision_avoidance_violation = bool(self.last_motion_errors.self_collision_avoidance_violation)
      self.last_motion_errors.joint_velocity_violation = bool(self.last_motion_errors.joint_velocity_violation)
      self.last_motion_errors.cartesian_velocity_violation = bool(self.last_motion_errors.cartesian_velocity_violation)
      self.last_motion_errors.force_control_safety_violation = bool(self.last_motion_errors.force_control_safety_violation)
      self.last_motion_errors.joint_reflex = bool(self.last_motion_errors.joint_reflex)
      self.last_motion_errors.cartesian_reflex = bool(self.last_motion_errors.cartesian_reflex)
      self.last_motion_errors.max_goal_pose_deviation_violation = bool(self.last_motion_errors.max_goal_pose_deviation_violation)
      self.last_motion_errors.max_path_pose_deviation_violation = bool(self.last_motion_errors.max_path_pose_deviation_violation)
      self.last_motion_errors.cartesian_velocity_profile_safety_violation = bool(self.last_motion_errors.cartesian_velocity_profile_safety_violation)
      self.last_motion_errors.joint_position_motion_generator_start_pose_invalid = bool(self.last_motion_errors.joint_position_motion_generator_start_pose_invalid)
      self.last_motion_errors.joint_motion_generator_position_limits_violation = bool(self.last_motion_errors.joint_motion_generator_position_limits_violation)
      self.last_motion_errors.joint_motion_generator_velocity_limits_violation = bool(self.last_motion_errors.joint_motion_generator_velocity_limits_violation)
      self.last_motion_errors.joint_motion_generator_velocity_discontinuity = bool(self.last_motion_errors.joint_motion_generator_velocity_discontinuity)
      self.last_motion_errors.joint_motion_generator_acceleration_discontinuity = bool(self.last_motion_errors.joint_motion_generator_acceleration_discontinuity)
      self.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid = bool(self.last_motion_errors.cartesian_position_motion_generator_start_pose_invalid)
      self.last_motion_errors.cartesian_motion_generator_elbow_limit_violation = bool(self.last_motion_errors.cartesian_motion_generator_elbow_limit_violation)
      self.last_motion_errors.cartesian_motion_generator_velocity_limits_violation = bool(self.last_motion_errors.cartesian_motion_generator_velocity_limits_violation)
      self.last_motion_errors.cartesian_motion_generator_velocity_discontinuity = bool(self.last_motion_errors.cartesian_motion_generator_velocity_discontinuity)
      self.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity = bool(self.last_motion_errors.cartesian_motion_generator_acceleration_discontinuity)
      self.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent = bool(self.last_motion_errors.cartesian_motion_generator_elbow_sign_inconsistent)
      self.last_motion_errors.cartesian_motion_generator_start_elbow_invalid = bool(self.last_motion_errors.cartesian_motion_generator_start_elbow_invalid)
      self.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation = bool(self.last_motion_errors.cartesian_motion_generator_joint_position_limits_violation)
      self.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation = bool(self.last_motion_errors.cartesian_motion_generator_joint_velocity_limits_violation)
      self.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity = bool(self.last_motion_errors.cartesian_motion_generator_joint_velocity_discontinuity)
      self.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity = bool(self.last_motion_errors.cartesian_motion_generator_joint_acceleration_discontinuity)
      self.last_motion_errors.cartesian_position_motion_generator_invalid_frame = bool(self.last_motion_errors.cartesian_position_motion_generator_invalid_frame)
      self.last_motion_errors.force_controller_desired_force_tolerance_violation = bool(self.last_motion_errors.force_controller_desired_force_tolerance_violation)
      self.last_motion_errors.controller_torque_discontinuity = bool(self.last_motion_errors.controller_torque_discontinuity)
      self.last_motion_errors.start_elbow_sign_inconsistent = bool(self.last_motion_errors.start_elbow_sign_inconsistent)
      self.last_motion_errors.communication_constraints_violation = bool(self.last_motion_errors.communication_constraints_violation)
      self.last_motion_errors.power_limit_violation = bool(self.last_motion_errors.power_limit_violation)
      self.last_motion_errors.joint_p2p_insufficient_torque_for_planning = bool(self.last_motion_errors.joint_p2p_insufficient_torque_for_planning)
      self.last_motion_errors.tau_j_range_violation = bool(self.last_motion_errors.tau_j_range_violation)
      self.last_motion_errors.instability_detected = bool(self.last_motion_errors.instability_detected)
      self.last_motion_errors.joint_move_in_wrong_direction = bool(self.last_motion_errors.joint_move_in_wrong_direction)
      self.last_motion_errors.cartesian_spline_motion_generator_violation = bool(self.last_motion_errors.cartesian_spline_motion_generator_violation)
      self.last_motion_errors.joint_via_motion_generator_planning_joint_limit_violation = bool(self.last_motion_errors.joint_via_motion_generator_planning_joint_limit_violation)
      self.last_motion_errors.base_acceleration_initialization_timeout = bool(self.last_motion_errors.base_acceleration_initialization_timeout)
      self.last_motion_errors.base_acceleration_invalid_reading = bool(self.last_motion_errors.base_acceleration_invalid_reading)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_42d = None
def _get_struct_42d():
    global _struct_42d
    if _struct_42d is None:
        _struct_42d = struct.Struct("<42d")
    return _struct_42d
_struct_49d = None
def _get_struct_49d():
    global _struct_49d
    if _struct_49d is None:
        _struct_49d = struct.Struct("<49d")
    return _struct_49d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_d83B = None
def _get_struct_d83B():
    global _struct_d83B
    if _struct_d83B is None:
        _struct_d83B = struct.Struct("<d83B")
    return _struct_d83B
